#!/usr/bin/env bash
set -Eeuo pipefail

##########################################################################
#  Neomnia — Kickstarter Azure (install & setup)
#  Licence : Charles Van den Driessche
#  Auteur  : @neomnia
#  Repo    : https://github.com/charlesvdd/administrator-neomnia/tree/azure
#  Version : 2025-08-31
##########################################################################

# 🎨 Couleurs
RED="\033[31m"; GREEN="\033[32m"; YELLOW="\033[33m"; BLUE="\033[34m"
MAGENTA="\033[35m"; CYAN="\033[36m"; BOLD="\033[1m"; RESET="\033[0m"

# 📝 Logging
LOGFILE="/var/log/neomnia-setup.log"
mkdir -p "$(dirname "$LOGFILE")"; touch "$LOGFILE" || LOGFILE="/tmp/neomnia-setup.log"

log()  { echo -e "${CYAN}[Neomnia]${RESET} $*"; echo "[$(date '+%F %T')] $*" >>"$LOGFILE"; }
ok()   { log "${GREEN}✔${RESET} $*"; }
warn() { log "${YELLOW}⚠${RESET} $*"; }
err()  { log "${RED}✖${RESET} $*"; }

trap 'err "Erreur (ligne ${BASH_LINENO[0]}). Consulte $LOGFILE."' ERR

# 🌀 Spinner
spinner() { local pid=$1; local spin='|/-\'; while kill -0 "$pid" 2>/dev/null; do for c in $spin; do printf "\r${CYAN}[Neomnia]${RESET} ⏳ %c " "$c"; sleep 0.1; done; done; printf "\r"; }
run_with_spinner() { log "$1"; shift; ("$@" >>"$LOGFILE" 2>&1)& spinner $!; wait $!; ok "$1 terminé."; }

# 🔡 Fonctions input
ask_nonempty() { local val; while :; do read -rp "$1" val; [[ -n "${val// }" ]] && { echo "$val"; return; }; echo "Valeur requise."; done; }
ask_secret() { local v1 v2; while :; do read -srp "$1" v1; echo; read -srp "Confirme la clé : " v2; echo; [[ "$v1" == "$v2" && -n "${v1// }" ]] && { echo "$v1"; return; }; echo "Les valeurs ne correspondent pas."; done; }

# 🚀 Demandes utilisateur (toujours en tout début)
GROUP_NAME="$(ask_nonempty '👉 Nom du groupe à créer : ')"
GH_TOKEN="$(ask_secret   '👉 Clé API GitHub (masquée) : ')"

# ⚡ Prérequis
if [[ $EUID -ne 0 ]]; then err "Ce script doit être lancé en root."; exit 1; fi

export DEBIAN_FRONTEND=noninteractive
run_with_spinner "Mise à jour APT" apt-get update -y
run_with_spinner "Upgrade système" apt-get upgrade -y
run_with_spinner "Installation outils" apt-get install -y curl git ufw tree wget jq acl

# 👥 GitHub CLI
if ! command -v gh >/dev/null; then
  run_with_spinner "Installation GitHub CLI" bash -c "
    apt-get install -y curl gnupg &&
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | tee /usr/share/keyrings/githubcli-archive-keyring.gpg >/dev/null &&
    echo 'deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main' > /etc/apt/sources.list.d/github-cli.list &&
    apt-get update -y &&
    apt-get install -y gh
  "
fi

# 🔐 Auth GitHub → via env, pas de blocage
log "Authentification GitHub via token…"
export GITHUB_TOKEN="$GH_TOKEN"

# Vérif
if ! gh api user >/dev/null 2>&1; then
  if ! curl -fsS -H "Authorization: token ${GH_TOKEN}" https://api.github.com/user >/dev/null; then
    err "Échec de l'authentification GitHub."
    exit 1
  fi
fi
ok "Authentification GitHub validée."

# 👥 Groupe
AZ_USER="${SUDO_USER:-$(whoami)}"
if getent group "$GROUP_NAME" >/dev/null; then
  warn "Groupe $GROUP_NAME déjà existant."
else
  run_with_spinner "Création du groupe $GROUP_NAME" groupadd "$GROUP_NAME"
fi
[[ -n "$AZ_USER" ]] && run_with_spinner "Ajout de $AZ_USER au groupe $GROUP_NAME" usermod -a -G "$GROUP_NAME" "$AZ_USER"

# 📁 ACL
mkdir -p /opt
run_with_spinner "ACL sur /opt" bash -c "
  chown -R root:${GROUP_NAME} /opt &&
  chmod -R 2775 /opt &&
  setfacl -R -m g:${GROUP_NAME}:rwx /opt &&
  setfacl -dR -m g:${GROUP_NAME}:rwx /opt
"

# 🔥 UFW
ufw allow OpenSSH >/dev/null 2>&1 || true
ufw --force enable

# ✅ Fin
ok "Groupe ${GROUP_NAME} prêt."
ok "GitHub CLI configuré avec token."
ok "Journal dispo : ${LOGFILE}"
