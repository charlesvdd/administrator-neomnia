#!/usr/bin/env bash
set -Eeuo pipefail
##########################################################################
#  Neomnia ‚Äî Kickstarter Azure (install & setup)                          #
#  Licence : Charles Van den Driessche                                    #
#  Auteur  : @neomnia                                                     #
#  Repo    : https://github.com/charlesvdd/administrator-neomnia/tree/azure
#  Version : 2025-08-31
##########################################################################
# üé® Couleurs
RED="\033[31m"; GREEN="\033[32m"; YELLOW="\033[33m"; BLUE="\033[34m"
MAGENTA="\033[35m"; CYAN="\033[36m"; BOLD="\033[1m"; RESET="\033[0m"
# üìù Logging (console + fichier), chaque ligne pr√©fix√©e [Neomnia]
LOGFILE="/var/log/neomnia-setup.log"
if ! (mkdir -p "$(dirname "$LOGFILE")" && touch "$LOGFILE" 2>/dev/null); then
  LOGFILE="/tmp/neomnia-setup.log"; mkdir -p /tmp || true; touch "$LOGFILE" || true
fi
_log_line(){ local ts; ts="$(date '+%F %T')"; echo -e "${CYAN}[Neomnia]${RESET} $*"; echo -e "[$ts] [Neomnia] $(echo -e "$*" | sed -r 's/\x1B\[[0-9;]*[mK]//g')" >>"$LOGFILE"; }
log(){ _log_line "$*"; }; ok(){ _log_line "${GREEN}‚úî${RESET} $*"; }; warn(){ _log_line "${YELLOW}‚ö†${RESET} $*"; }; err(){ _log_line "${RED}‚úñ${RESET} $*"; }
trap 'err "Une erreur est survenue (ligne ${LINENO}). Consulter $LOGFILE."' ERR
# üåÄ Spinner & mini animations
spinner(){ local pid="$1" delay=0.1 spin='|/-\'; while kill -0 "$pid" 2>/dev/null; do for ((i=0;i<${#spin};i++)); do printf "\r${CYAN}[Neomnia]${RESET} ‚è≥ %c " "${spin:$i:1}"; sleep "$delay"; done; done; printf "\r${CYAN}[Neomnia]${RESET}    \b\b\b\b"; }
run_with_spinner(){ local msg="$1"; shift; log "$msg"; ( "$@" >>"$LOGFILE" 2>&1 ) & local pid=$!; spinner "$pid"; wait "$pid"; ok "$msg termin√©."; }
typewriter(){ local text="$1" delay="${2:-0.02}" out=""; for ((i=0;i<${#text};i++)); do out+="${text:$i:1}"; printf "\r${CYAN}[Neomnia]${RESET} %s" "$out"; sleep "$delay"; done; echo; }
banner(){ cat <<'EOF' | while IFS= read -r line; do log "$line"; done
 _   _                 _       _              _           
| \ | | ___  _ __  ___| | __ _| |_ __ _ _ __ (_)_ __  ___  _
|  \| |/ _ \| '_ \/ __| |/ _` | __/ _` | '_ \| | '_ \/ __|
| |\  | (_) | | | \__ \ | (_| | || (_| | | | | | | | \__ \
|_| \_|\___/|_| |_|___/_|\__,_|\__\__,_|_| |_|_|_| |_|___/
                     Kickstarter ‚Ä¢ Azure
EOF
}
# üõ°Ô∏è Pr√©requis
require_root(){ if [[ "${EUID:-$(id -u)}" -ne 0 ]]; then err "Ce script doit √™tre ex√©cut√© en root (sudo)."; exit 1; fi; }
require_cmd(){ local miss=(); for c in "$@"; do command -v "$c" >/dev/null 2>&1 || miss+=("$c"); done; if ((${#miss[@]})); then err "Commandes manquantes: ${miss[*]}"; exit 1; fi; }
# üåê RAW GitHub helpers (branche azure)
GITHUB_OWNER="charlesvdd"; GITHUB_REPO="administrator-neomnia"; GITHUB_BRANCH="azure"
RAW_BASE="https://raw.githubusercontent.com/${GITHUB_OWNER}/${GITHUB_REPO}/${GITHUB_BRANCH}"
fetch_raw(){ local remote="$1" dest="${2:-$(basename "$1")}"; log "T√©l√©chargement RAW : ${BLUE}${RAW_BASE}/${remote}${RESET} ‚Üí ${dest}"; curl -fsSL "${RAW_BASE}/${remote}" -o "$dest"; ok "Fichier r√©cup√©r√©: $dest"; }
run_raw(){ local remote="$1" tmp="/tmp/$(basename "$remote")"; fetch_raw "$remote" "$tmp"; chmod +x "$tmp"; log "Ex√©cution du script RAW: ${BLUE}$remote${RESET}"; bash "$tmp"; }
# üöÄ D√©but (aucun code hostname dans cette version)
require_root
banner
typewriter "Login Neomnia‚Ä¶ OK" 0.03
typewriter "Chargement des modules‚Ä¶ OK" 0.02
typewriter "Initialisation Kickstarter Azure‚Ä¶ OK" 0.02
export DEBIAN_FRONTEND=noninteractive
run_with_spinner "Mise √† jour du cache APT" apt-get update -y
run_with_spinner "Installation des mises √† niveau" apt-get upgrade -y
run_with_spinner "Installation des outils (curl git ufw tree wget jq acl python3 python3-pip python3-venv)" apt-get install -y curl git ufw tree wget jq acl python3 python3-pip python3-venv
require_cmd curl jq ufw git setfacl python3 pip3

# üë• Groupe + ACL /opt (non-interactif)
GROUP_NAME="${NEO_GROUP:-${GROUP_NAME:-gitusers}}"
log "Groupe cible: ${BOLD}${GROUP_NAME}${RESET}"
if getent group "$GROUP_NAME" >/dev/null; then
  warn "Groupe ${GROUP_NAME} d√©j√† existant."
else
  run_with_spinner "Cr√©ation du groupe ${GROUP_NAME}" groupadd "$GROUP_NAME"
fi

AZ_USER=""
for u in azureuser admin ubuntu; do if id "$u" >/dev/null 2>&1; then AZ_USER="$u"; break; fi; done
if [[ -n "$AZ_USER" ]]; then
  run_with_spinner "Ajout de ${AZ_USER} au groupe ${GROUP_NAME}" usermod -a -G "$GROUP_NAME" "$AZ_USER"
else
  warn "Aucun utilisateur 'azureuser/admin/ubuntu' d√©tect√© ‚Äî saut de l‚Äôajout au groupe."
fi

# Ajouter l'utilisateur actif au groupe
CURRENT_USER="$(whoami)"
if [[ "$CURRENT_USER" != "root" ]]; then
  run_with_spinner "Ajout de l'utilisateur actif (${CURRENT_USER}) au groupe ${GROUP_NAME}" usermod -a -G "$GROUP_NAME" "$CURRENT_USER"
fi

mkdir -p /opt
run_with_spinner "Application des droits + ACL sur /opt" bash -c "
  chown -R root:'$GROUP_NAME' /opt &&
  chmod -R 2775 /opt &&
  setfacl -R -m g:'$GROUP_NAME':rwx /opt &&
  setfacl -dR -m g:'$GROUP_NAME':rwx /opt
"

# Mise √† jour de pip
run_with_spinner "Mise √† jour de pip" python3 -m pip install --upgrade pip

# üî• UFW
run_with_spinner "Ouverture OpenSSH dans UFW" ufw allow OpenSSH
# run_with_spinner "Ouverture HTTP/HTTPS (80/443)" bash -c 'ufw allow 80/tcp && ufw allow 443/tcp'
run_with_spinner "Activation de UFW" ufw --force enable

# üß∞ Git (optionnel, non interactif si variables absentes)
[[ -n "${GIT_EMAIL:-}" ]] && git config --global user.email "$GIT_EMAIL"
[[ -n "${GIT_NAME:-}"  ]] && git config --global user.name  "$GIT_NAME"
ok "Configuration Git appliqu√©e (si variables d√©finies)."

# Exemple d‚Äôex√©cution RAW (d√©sactiv√© par d√©faut) :
# run_raw "scripts/ton-script.sh"
# run_raw "init.ssh"   # ‚ö† √©viter la r√©cursion si c‚Äôest ce fichier

echo -e "\n${MAGENTA}${BOLD}############## V√©rification finale ##############${RESET}"
ok "Groupe ${GROUP_NAME} appliqu√© √† /opt (ACL h√©ritables)."
ok "L'utilisateur actif (${CURRENT_USER}) a √©t√© ajout√© au groupe ${GROUP_NAME}."
ok "Journal : ${LOGFILE}"
echo -e "${MAGENTA}${BOLD}##############   Setup complet   ##############${RESET}\n"
