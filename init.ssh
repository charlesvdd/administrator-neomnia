#!/usr/bin/env bash
set -Eeuo pipefail

###############################################################################
# Script d'installation et configuration système – Application: inital vps (Azure)
# Licence : (c) Charles Van den Driessche – @neomnia
#
# Permission est accordée d’utiliser, copier, modifier et distribuer ce script,
# avec mention de l’auteur. Le script est fourni "en l’état", sans garantie d’aucune sorte.
#
# Auteur  : @neomnia
# Version : 1.2 (adapté pour Azure)
###############################################################################

# ——————— Paramètres d’app et journalisation ———————
APP_NAME="inital vps azure"
BRAND_ONE="Neomnia"
BRAND_TWO="Neo-inital"
LOGFILE="/var/log/${APP_NAME// /-}-setup.log"
START_TS="$(date +%s)"

# Redirection vers log + console
mkdir -p "$(dirname "$LOGFILE")"
exec > >(tee -a "$LOGFILE") 2>&1

# ——————— Couleurs ———————
RED="\033[31m"; GREEN="\033[32m"; YELLOW="\033[33m"; BLUE="\033[34m"
MAGENTA="\033[35m"; CYAN="\033[36m"; BOLD="\033[1m"; RESET="\033[0m"

# ——————— Préfixe de log ———————
prefix() {
  echo -e "${CYAN}[${BRAND_ONE}]${RESET}${CYAN}[${BRAND_TWO}]${RESET}${CYAN}[${APP_NAME}]${RESET} $(date +%H:%M:%S)"
}

log()  { echo -e "$(prefix) $*"; }
ok()   { echo -e "$(prefix) ${GREEN}✔${RESET} $*"; }
warn() { echo -e "$(prefix) ${YELLOW}⚠${RESET} $*"; }
err()  { echo -e "$(prefix) ${RED}✖${RESET} $*" >&2; }

# ——————— Gestion d’erreurs & sortie ———————
CURRENT_STEP="initialisation"
on_error() {
  local exit_code=$?
  local line_no=$1
  local cmd=${2:-"N/A"}
  err "Échec pendant l’étape: ${BOLD}${CURRENT_STEP}${RESET} (ligne ${line_no})"
  err "Dernière commande: ${BOLD}${cmd}${RESET}"
  err "Journal complet: ${LOGFILE}"
  echo
  exit "$exit_code"
}

on_exit() {
  local code=$?
  local end_ts
  end_ts="$(date +%s)"
  local duration=$(( end_ts - START_TS ))
  if [ "$code" -eq 0 ]; then
    ok "Setup terminé sans erreur ✅ (durée: ${duration}s)."
    ok "Journal: ${LOGFILE}"
  else
    err "Setup terminé avec erreurs ❌ (durée: ${duration}s)."
    err "Consulte le journal: ${LOGFILE}"
  fi
}

trap 'on_error $LINENO "$BASH_COMMAND"' ERR
trap 'on_exit' EXIT

# ——————— Vérif shell ———————
if [ -z "${BASH_VERSION:-}" ]; then
  log "Bash requis → relance sous bash..."
  exec bash "$0" "$@"
fi

# ——————— Vérif root ———————
CURRENT_STEP="vérification des privilèges"
if [ "${EUID:-$(id -u)}" -ne 0 ]; then
  err "Ce script doit être exécuté en root."
  exit 1
fi
ok "Privilèges root confirmés."

# ——————— Utilisateur actif ———————
CURRENT_STEP="utilisation de l'utilisateur actif"
ACTIVE_USER=$(logname)
ok "Utilisateur actif: ${ACTIVE_USER}."

# ——————— Groupe ———————
CURRENT_STEP="création du groupe"
GROUP_NAME="gitusers"  # Nom de groupe par défaut
read -rp "$(echo -e "$(prefix) ${BOLD}Nom du groupe (appuyez sur Entrée pour utiliser 'gitusers') :${RESET} ")" custom_group_name

# Utiliser le nom personnalisé si fourni, sinon utiliser 'gitusers'
if [ -n "$custom_group_name" ]; then
    GROUP_NAME="$custom_group_name"
fi

if ! getent group "$GROUP_NAME" >/dev/null; then
  groupadd "$GROUP_NAME"
  ok "Groupe ${GROUP_NAME} créé."
else
  warn "Groupe ${GROUP_NAME} déjà existant."
fi

# Ajouter l'utilisateur actif au groupe
usermod -aG "$GROUP_NAME" "$ACTIVE_USER"
ok "Utilisateur ${ACTIVE_USER} ajouté au groupe ${GROUP_NAME}."

# ——————— Paquets ———————
CURRENT_STEP="mise à jour système et installation des paquets"
log "Mise à jour du système..."
export DEBIAN_FRONTEND=noninteractive
apt-get update -y && apt-get upgrade -y
ok "Système à jour."

log "Installation des outils (acl, curl, git, tree, telnet)..."
apt-get install -y acl curl git tree telnet
ok "Paquets installés."

# ——————— Droits /opt avec ACL ———————
CURRENT_STEP="configuration des droits /opt avec ACL"
chown -R root:"$GROUP_NAME" /opt 2>/dev/null || true
chmod -R 2775 /opt 2>/dev/null || true
setfacl -R -m g:"$GROUP_NAME":rwx /opt
ok "ACL appliquées sur /opt pour le groupe ${GROUP_NAME}."

# ——————— Vérification finale ———————
CURRENT_STEP="vérification finale"
echo -e "\n${MAGENTA}${BOLD}############## Vérification finale — ${APP_NAME} ##############${RESET}"
ok "Utilisateur actif: ${ACTIVE_USER}"
ok "Groupe appliqué à /opt avec ACL: ${GROUP_NAME}"
echo -e "${MAGENTA}${BOLD}##############   Setup complet   ##############${RESET}\n"
