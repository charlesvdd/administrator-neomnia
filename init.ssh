#!/bin/bash
#############################################
#   _            _        _                 #
#  | |          | |      | |                #
#  | |__     ___| |_ __ _| |__   ___  _ __  #
#  | '_ \   / _ \ __/ _` | '_ \ / _ \| '_ \ #
#  | |_) | |  __/ || (_| | |_) | (_) | | | |#
#  |_.__/   \___|\__\__,_|_.__/ \___/|_| |_|#
#                                           #
#     Basic Ubuntu Setup (RAW aware)        #
#############################################
# --------------------------
# Color Definitions
# --------------------------
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[34m"
MAGENTA="\033[35m"
CYAN="\033[36m"
BOLD="\033[1m"
RESET="\033[0m"
echo -e "${CYAN}${BOLD}############################################################${RESET}"
echo -e "${CYAN}${BOLD}#   Starting Basic Ubuntu Setup & UFW Firewall           #${RESET}"
echo -e "${CYAN}${BOLD}############################################################${RESET}"
echo
# --------------------------
# Check for root privileges
# --------------------------
if [ "$EUID" -ne 0 ]; then
  echo -e "${YELLOW}âš  This script needs to run as root. Trying sudo...${RESET}"
  exec sudo bash "$0" "$@"
fi
# --------------------------
# Prompt for new user name and create the user
# --------------------------
read -p "Enter the new user name: " NEW_USER_NAME
useradd -m "$NEW_USER_NAME"
if [ $? -eq 0 ]; then
  echo -e "${GREEN}âœ” User '$NEW_USER_NAME' created successfully.${RESET}"
else
  echo -e "${RED}âœ– Failed to create user '$NEW_USER_NAME'.${RESET}"
  exit 1
fi
# --------------------------
# Prompt for and set user password
# --------------------------
read -s -p "Enter password for '$NEW_USER_NAME': " NEW_USER_PASSWORD
echo "$NEW_USER_NAME:$NEW_USER_PASSWORD" | chpasswd
if [ $? -eq 0 ]; then
  echo -e "${GREEN}âœ” Password for user '$NEW_USER_NAME' set successfully.${RESET}"
else
  echo -e "${RED}âœ– Failed to set password for user '$NEW_USER_NAME'.${RESET}"
  exit 1
fi
# --------------------------
# Prompt for group name
# --------------------------
read -p "Enter the group name (default is gitusers): " GROUP_NAME
GROUP_NAME=${GROUP_NAME:-gitusers}
# Check if the group already exists
if ! getent group "$GROUP_NAME" >/dev/null; then
  groupadd "$GROUP_NAME"
  echo -e "${GREEN}âœ” Group '$GROUP_NAME' created.${RESET}"
else
  echo -e "${YELLOW}âš  Group '$GROUP_NAME' already exists.${RESET}"
fi
# --------------------------
# Prompt for GitHub credentials
# --------------------------
read -p "Enter the GitHub username: " GITHUB_USERNAME
read -s -p "Enter the GitHub API key: " GITHUB_API_KEY
echo
# --------------------------
# Script Metadata (detect if RAW or FILE)
# --------------------------
IS_RAW=0
if [[ -n "${BASH_SOURCE[0]}" && -f "${BASH_SOURCE[0]}" ]]; then
  SCRIPT_PATH=$(realpath "${BASH_SOURCE[0]}")
  SCRIPT_NAME=$(basename "$SCRIPT_PATH")
else
  IS_RAW=1
  SCRIPT_PATH="/dev/stdin"
  SCRIPT_NAME="raw-script"
fi
# --------------------------
# If not RAW, copy to /tmp/scripts
# --------------------------
TMP_SCRIPT_DIR="/tmp/scripts"
TMP_SCRIPT_PATH="$TMP_SCRIPT_DIR/$SCRIPT_NAME"
if [ "$IS_RAW" -eq 0 ]; then
  echo -e "${BLUE}${BOLD}ðŸ”¹ Preparation:${RESET} Copying script to $TMP_SCRIPT_PATH..."
  mkdir -p "$TMP_SCRIPT_DIR"
  cp "$SCRIPT_PATH" "$TMP_SCRIPT_PATH"
  chmod +x "$TMP_SCRIPT_PATH"
  trap 'rm -f "$TMP_SCRIPT_PATH"' EXIT
  echo -e "${GREEN}âœ” Script copied locally.${RESET}"
else
  echo -e "${YELLOW}âš  RAW execution detected. Skipping temp copy.${RESET}"
fi
# --------------------------
# Step 1 â€“ Update system
# --------------------------
echo -e "${BLUE}${BOLD}ðŸ”¹ Step 1/6:${RESET} Updating system..."
apt update && apt upgrade -y
if [ $? -eq 0 ]; then
  echo -e "${GREEN}âœ” System updated successfully.${RESET}"
else
  echo -e "${RED}âœ– System update failed.${RESET}"
  exit 1
fi
echo
# --------------------------
# Step 2 â€“ Install essentials
# --------------------------
echo -e "${BLUE}${BOLD}ðŸ”¹ Step 2/6:${RESET} Installing packages (tree, ufw, git, curl, wget)..."
apt install -y tree ufw git curl wget
if [ $? -eq 0 ]; then
  echo -e "${GREEN}âœ” Packages installed.${RESET}"
else
  echo -e "${RED}âœ– Package installation failed.${RESET}"
  exit 1
fi
echo
# --------------------------
# Step 3 â€“ Configure UFW
# --------------------------
echo -e "${BLUE}${BOLD}ðŸ”¹ Step 3/6:${RESET} Enabling UFW and allowing SSH..."
ufw allow OpenSSH
ufw --force enable
if [ $? -eq 0 ]; then
  echo -e "${GREEN}âœ” UFW enabled and SSH allowed.${RESET}"
else
  echo -e "${RED}âœ– UFW configuration failed.${RESET}"
  exit 1
fi
echo
# --------------------------
# Set up Git user identity
# --------------------------
read -p "Enter your Git email: " GIT_EMAIL
read -p "Enter your Git username: " GIT_USERNAME

git config --global user.email "$GIT_EMAIL"
git config --global user.name "$GIT_USERNAME"

echo -e "${GREEN}âœ” Git user identity set.${RESET}"
echo
# --------------------------
# Step 4 â€“ Create /var/backups/github with group access
# --------------------------
echo -e "${BLUE}${BOLD}ðŸ”¹ Step 4/6:${RESET} Preparing shared Git working directory..."
# 2. Create the directory
mkdir -p /var/backups/github
# 3. Add the user who ran the script to the group
usermod -a -G "$GROUP_NAME" "$NEW_USER_NAME"
echo -e "${CYAN}â†’ Added user '$NEW_USER_NAME' to group '$GROUP_NAME'${RESET}"
# 4. Apply permissions
chown -R root:"$GROUP_NAME" /var/backups/github
chmod -R 2770 /var/backups/github  # rwx for root and group, nothing for others + setgid
chmod 755 /var/backups             # necessary for the folder to be accessible
echo -e "${GREEN}âœ” /var/backups/github is ready for shared Git use.${RESET}"
echo
# --------------------------
# Step 5 â€“ Secure /var/backups root dir
# --------------------------
echo -e "${BLUE}${BOLD}ðŸ”¹ Step 5/6:${RESET} Securing /var/backups root directory..."
chown root:root /var/backups
chmod 755 /var/backups
echo -e "${GREEN}âœ” /var/backups root is accessible but protected.${RESET}"
echo
# --------------------------
# Step 6 â€“ Test user access
# --------------------------
echo -e "${BLUE}${BOLD}ðŸ”¹ Step 6/6:${RESET} Testing user access to /var/backups/github..."
if sudo -u "$NEW_USER_NAME" test -w /var/backups/github; then
  echo -e "${GREEN}âœ” User '$NEW_USER_NAME' has write access to /var/backups/github.${RESET}"
else
  echo -e "${RED}âœ– User '$NEW_USER_NAME' does NOT yet have access.${RESET}"
  echo -e "${YELLOW}â„¹ Please open a new session or run: ${BOLD}newgrp $GROUP_NAME${RESET}${YELLOW} to apply group membership immediately.${RESET}"
fi
echo
# --------------------------
# Done
# --------------------------
echo -e "${MAGENTA}${BOLD}############################################################${RESET}"
echo -e "${MAGENTA}${BOLD}#   âœ… Setup Complete. Everything is configured.         #${RESET}"
echo -e "${MAGENTA}${BOLD}############################################################${RESET}"
