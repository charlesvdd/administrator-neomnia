#!/usr/bin/env bash
set -o errexit
set -o nounset
set -o pipefail
IFS=$'\n\t'

##########################################################################
#  Neomnia ‚Äî Kickstarter Azure (install & setup)                          #
#  Licence : Charles Van den Driessche                                    #
#  Auteur  : @neomnia                                                     #
#  Repo    : https://github.com/charlesvdd/administrator-neomnia/tree/azure
#  Version : 2025-08-31
##########################################################################
# üé® Couleurs
RED="\033[31m"; GREEN="\033[32m"; YELLOW="\033[33m"; BLUE="\033[34m"
MAGENTA="\033[35m"; CYAN="\033[36m"; BOLD="\033[1m"; RESET="\033[0m"
# üìù Logging (console + fichier), chaque ligne pr√©fix√©e [Neomnia]
LOGFILE="/var/log/neomnia-setup.log"
mkdir -p "$(dirname "$LOGFILE")" || mkdir -p /tmp
touch "$LOGFILE" || touch /tmp/neomnia-setup.log
LOGFILE=${LOGFILE:-/tmp/neomnia-setup.log}

_log_line() {
    local ts; ts="$(date '+%F %T')"
    echo -e "${CYAN}[Neomnia]${RESET} $*"
    echo -e "[$ts] [Neomnia] $(echo -e "$*" | sed -r 's/\x1B\[[0-9;]*[mK]//g')" >> "$LOGFILE"
}

log() { _log_line "$*"; }
ok() { _log_line "${GREEN}‚úî${RESET} $*"; }
warn() { _log_line "${YELLOW}‚ö†${RESET} $*"; }
err() {
    local line_num=${1:-}
    shift
    _log_line "${RED}‚úñ${RESET} $*"
    if [[ -n "$line_num" ]]; then
        _log_line "  Erreur √† la ligne $line_num."
    fi
}

trap 'err ${LINENO} "Une erreur est survenue. Consulter $LOGFILE."' ERR

# üåÄ Spinner & mini animations
spinner() {
    local pid="$1" delay=0.1 spin='|/-\'
    while kill -0 "$pid" 2>/dev/null; do
        for ((i=0; i<${#spin}; i++)); do
            printf "\r${CYAN}[Neomnia]${RESET} ‚è≥ %c " "${spin:$i:1}"
            sleep "$delay"
        done
    done
    printf "\r${CYAN}[Neomnia]${RESET}    \b\b\b\b"
}

run_with_spinner() {
    local msg="$1"; shift
    log "$msg"
    "$@" >>"$LOGFILE" 2>&1 &
    local pid=$!
    spinner "$pid"
    wait "$pid"
    local status=$?
    if [ $status -eq 0 ]; then
        ok "$msg termin√©."
    else
        err ${LINENO} "$msg a √©chou√©."
    fi
    return $status
}

typewriter() {
    local text="$1" delay="${2:-0.02}" out=""
    for ((i=0; i<${#text}; i++)); do
        out+="${text:$i:1}"
        printf "\r${CYAN}[Neomnia]${RESET} %s" "$out"
        sleep "$delay"
    done
    echo
}

banner() {
    cat <<'EOF' | while IFS= read -r line; do log "$line"; done
 _   _                 _       _              _           
| \ | | ___  _ __  ___| | __ _| |_ __ _ _ __ (_)_ __  ___  _
|  \| |/ _ \| '_ \/ __| |/ _` | __/ _` | '_ \| | '_ \/ __|
| |\  | (_) | | | \__ \ | (_| | || (_| | | | | | | | \__ \
|_| \_|\___/|_| |_|___/_|\__,_|\__\__,_|_| |_|_|_| |_|___/
                     Kickstarter ‚Ä¢ Azure
EOF
}

# üõ°Ô∏è Pr√©requis
require_root() {
    if [[ "${EUID:-$(id -u)}" -ne 0 ]]; then
        err ${LINENO} "Ce script doit √™tre ex√©cut√© en root (sudo)."
        exit 1
    fi
}

# V√©rifie si un paquet est disponible
is_package_available() {
    local package="$1"
    if apt-cache policy "$package" 2>/dev/null | grep -q 'Candidate:'; then
        return 0
    fi
    return 1
}

# Installe un paquet s'il est disponible
install_package() {
    local package="$1"
    if is_package_available "$package"; then
        log "Installation de $package"
        if apt-get install -y "$package" >>"$LOGFILE" 2>&1; then
            ok "$package install√© avec succ√®s."
            return 0
        else
            err ${LINENO} "√âchec de l'installation de $package."
            return 1
        fi
    else
        warn "$package n'est pas disponible."
        return 1
    fi
}

# üöÄ D√©but
require_root
banner
typewriter "Login Neomnia‚Ä¶ OK" 0.03
typewriter "Chargement des modules‚Ä¶ OK" 0.02
typewriter "Initialisation Kickstarter Azure‚Ä¶ OK" 0.02
export DEBIAN_FRONTEND=noninteractive

# Mise √† jour du cache APT
log "Mise √† jour du cache APT"
if ! apt-get update -y >>"$LOGFILE" 2>&1; then
    err ${LINENO} "√âchec de la mise √† jour du cache APT. V√©rifiez votre connexion Internet ou les d√©p√¥ts APT."
    exit 1
fi
ok "Mise √† jour du cache APT termin√©e."

# Installation des mises √† niveau
log "Installation des mises √† niveau"
if ! apt-get upgrade -y >>"$LOGFILE" 2>&1; then
    warn "Certaines mises √† niveau ont √©chou√©. Continuons malgr√© tout..."
fi
ok "Installation des mises √† niveau termin√©e."

# Installation des d√©pendances pour un environnement Python standard
log "V√©rification et installation des d√©pendances pour un environnement Python"

# Installation de git
if ! install_package git; then
    warn "Git ne sera pas install√©."
fi

# Installation de python3
if ! install_package python3; then
    err ${LINENO} "Python3 est requis. Impossible de continuer."
    exit 1
fi

# Installation de python3-pip
if ! install_package python3-pip; then
    warn "python3-pip ne sera pas install√©."
fi

# Installation de acl
if ! install_package acl; then
    warn "acl ne sera pas install√©."
fi

# V√©rification et installation de python3-venv ou python3.12-venv
if ! install_package python3.12-venv; then
    if ! install_package python3-venv; then
        warn "Ni python3.12-venv ni python3-venv ne sont disponibles. Installation de venv via ensurepip..."
        if ! python3 -m ensurepip --upgrade >>"$LOGFILE" 2>&1; then
            err ${LINENO} "√âchec de l'installation de ensurepip."
        fi
        if ! python3 -m pip install --upgrade virtualenv >>"$LOGFILE" 2>&1; then
            err ${LINENO} "√âchec de l'installation de virtualenv."
        else
            ok "virtualenv install√© via pip."
        fi
    fi
fi

# Mise √† jour de pip
log "Mise √† jour de pip"
if ! python3 -m pip install --upgrade pip >>"$LOGFILE" 2>&1; then
    err ${LINENO} "√âchec de la mise √† jour de pip."
    exit 1
fi
ok "Mise √† jour de pip termin√©e."

# üë• Groupe + ACL /opt (interactif pour le nom du groupe)
read -p "Entrez le nom du groupe √† cr√©er ou utiliser : " GROUP_NAME

# Cr√©er le groupe s'il n'existe pas
if ! getent group "$GROUP_NAME" >/dev/null; then
    log "Cr√©ation du groupe ${GROUP_NAME}"
    if ! groupadd "$GROUP_NAME" >>"$LOGFILE" 2>&1; then
        err ${LINENO} "√âchec de la cr√©ation du groupe ${GROUP_NAME}."
        exit 1
    fi
    ok "Groupe ${GROUP_NAME} cr√©√©."
else
    warn "Groupe ${GROUP_NAME} d√©j√† existant."
fi

# Ajouter l'utilisateur actif au groupe
CURRENT_USER="$(whoami)"
if [[ "$CURRENT_USER" != "root" ]]; then
    log "Ajout de l'utilisateur actif (${CURRENT_USER}) au groupe ${GROUP_NAME}"
    if ! usermod -a -G "$GROUP_NAME" "$CURRENT_USER" >>"$LOGFILE" 2>&1; then
        err ${LINENO} "√âchec de l'ajout de l'utilisateur actif au groupe ${GROUP_NAME}."
        exit 1
    fi
    ok "Utilisateur actif (${CURRENT_USER}) ajout√© au groupe ${GROUP_NAME}."
else
    warn "L'utilisateur actif est root. Il est d√©j√† privil√©gi√©."
fi

# Configurer les ACL pour /opt
mkdir -p /opt
log "Application des droits + ACL sur /opt"
if ! chown -R root:"$GROUP_NAME" /opt >>"$LOGFILE" 2>&1; then
    err ${LINENO} "√âchec de la modification du propri√©taire de /opt."
    exit 1
fi
if ! chmod -R 2775 /opt >>"$LOGFILE" 2>&1; then
    err ${LINENO} "√âchec de la modification des permissions de /opt."
    exit 1
fi
if ! setfacl -R -m g:"$GROUP_NAME":rwx /opt >>"$LOGFILE" 2>&1; then
    err ${LINENO} "√âchec de l'application des ACL sur /opt."
    exit 1
fi
if ! setfacl -dR -m g:"$GROUP_NAME":rwx /opt >>"$LOGFILE" 2>&1; then
    err ${LINENO} "√âchec de la configuration des ACL par d√©faut sur /opt."
    exit 1
fi
ok "Droits et ACL appliqu√©s sur /opt."

# üî• UFW
log "Ouverture OpenSSH dans UFW"
if ! ufw allow OpenSSH >>"$LOGFILE" 2>&1; then
    warn "√âchec de l'ouverture du port OpenSSH dans UFW."
fi
# Activation de UFW
log "Activation de UFW"
if ! ufw --force enable >>"$LOGFILE" 2>&1; then
    warn "√âchec de l'activation de UFW."
fi
ok "UFW configur√©."

# üß∞ Git (optionnel, non interactif si variables absentes)
if [[ -n "${GIT_EMAIL:-}" ]]; then
    git config --global user.email "$GIT_EMAIL" || warn "√âchec de la configuration de l'email Git."
fi
if [[ -n "${GIT_NAME:-}" ]]; then
    git config --global user.name "$GIT_NAME" || warn "√âchec de la configuration du nom Git."
fi
ok "Configuration Git appliqu√©e (si variables d√©finies)."

echo -e "\n${MAGENTA}${BOLD}############## V√©rification finale ##############${RESET}"
ok "Groupe ${GROUP_NAME} appliqu√© √† /opt (ACL h√©ritables)."
ok "L'utilisateur actif (${CURRENT_USER}) a √©t√© ajout√© au groupe ${GROUP_NAME}."
ok "Journal : ${LOGFILE}"
echo -e "${MAGENTA}${BOLD}##############   Setup complet   ##############${RESET}\n"
