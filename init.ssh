#!/usr/bin/env bash
set -Eeuo pipefail

##########################################################################
#  Neomnia ‚Äî Azure bootstrap (prompts d'abord, actions ensuite)
#  Licence : Charles Van den Driessche | Auteur : @neomnia
#  Version : 2025-08-31 (v3: saisie unique + validation API)
##########################################################################

RED="\033[31m"; GREEN="\033[32m"; YELLOW="\033[33m"; CYAN="\033[36m"; BOLD="\033[1m"; RESET="\033[0m"
LOGFILE="/var/log/neomnia-setup.log"; mkdir -p "$(dirname "$LOGFILE")" 2>/dev/null || true; touch "$LOGFILE" 2>/dev/null || true
log()  { echo -e "${CYAN}[Neomnia]${RESET} $*"; echo "[$(date '+%F %T')] $*" >>"$LOGFILE"; }
ok()   { log "${GREEN}‚úî${RESET} $*"; }
warn() { log "${YELLOW}‚ö†${RESET} $*"; }
err()  { log "${RED}‚úñ${RESET} $*"; }

trap 'err "Erreur (ligne ${BASH_LINENO[0]}). Voir $LOGFILE."' ERR

# ---------- Utilitaires ----------
# Normalise un token coll√© (supprime espaces, \r, guillemets autour)
normalize_token() {
  # 1) enl√®ve \r
  local t="${1%$'\r'}"
  # 2) trim d√©but/fin
  t="${t#"${t%%[![:space:]]*}"}"
  t="${t%"${t##*[![:space:]]}"}"
  # 3) supprime tous les espaces/retours invisibles
  t="$(printf '%s' "$t" | tr -d '[:space:]')"
  # 4) enl√®ve guillemets entourant √©ventuels
  t="${t%\"}"; t="${t#\"}"
  t="${t%\'}"; t="${t#\'}"
  printf '%s' "$t"
}

INPUT_TTY="/dev/tty"
have_tty=false
if [ -t 0 ] || [ -r "$INPUT_TTY" ]; then have_tty=true; fi

ask_line_tty() { local p="$1" v=""; read -rp "$p" v <"$INPUT_TTY"; printf '%s' "$(normalize_token "$v")"; }
ask_secret_tty() { local p="$1" v=""; read -srp "$p" v <"$INPUT_TTY"; echo; printf '%s' "$(normalize_token "$v")"; }

validate_github_token() {
  local tok="$1"
  # essai via gh si dispo, sinon via curl
  if command -v gh >/dev/null 2>&1; then
    GITHUB_TOKEN="$tok" gh api user >/dev/null 2>&1 && return 0
  fi
  curl -fsS -H "Authorization: token ${tok}" https://api.github.com/user >/dev/null 2>&1
}

require_root() { [[ $EUID -eq 0 ]] || { err "Ex√©cuter en root (sudo)."; exit 1; } }

# ---------- Prompts d‚Äôabord (ou ENV), z√©ro action avant ----------
: "${GROUP_NAME:=}"
: "${GITHUB_TOKEN:=${GH_TOKEN:-}}"

if [[ -z "${GROUP_NAME// }" ]]; then
  if $have_tty; then
    GROUP_NAME="$(ask_line_tty 'üëâ Nom du groupe √† cr√©er : ' )"
    [[ -n "${GROUP_NAME// }" ]] || { err "GROUP_NAME requis."; exit 1; }
  else
    err "Aucun TTY: d√©finis GROUP_NAME en variable d'environnement."; exit 1
  fi
fi

if [[ -z "${GITHUB_TOKEN// }" ]]; then
  if ! $have_tty; then
    err "Aucun TTY: d√©finis GITHUB_TOKEN (ou GH_TOKEN) en variable d'environnement."; exit 1
  fi
  # 3 tentatives max, saisie masqu√©e UNE SEULE FOIS, validation API
  attempts=0
  while (( attempts < 3 )); do
    attempts=$((attempts+1))
    local_raw="$(ask_secret_tty 'üëâ Cl√© API GitHub (masqu√©e) : ')" || true
    GITHUB_TOKEN="$(normalize_token "$local_raw")"
    if [[ -z "${GITHUB_TOKEN// }" ]]; then
      echo "  (cl√© vide ‚Äî r√©essaie)" >"$INPUT_TTY"
      continue
    fi
    # petit aper√ßu non sensible
    echo "  Aper√ßu: ${GITHUB_TOKEN:0:4}‚Ä¶${GITHUB_TOKEN: -4} (len=${#GITHUB_TOKEN})" >"$INPUT_TTY"
    if validate_github_token "$GITHUB_TOKEN"; then
      ok "Token GitHub valid√©."
      break
    else
      echo "  √âchec validation API GitHub ‚Äî v√©rifie la cl√© (scopes) et r√©essaie." >"$INPUT_TTY"
    fi
  done
  if (( attempts == 3 )) && ! validate_github_token "$GITHUB_TOKEN"; then
    err "Impossible de valider la cl√© apr√®s 3 essais."
    exit 1
  fi
else
  # token fourni par ENV ‚Äî on valide quand m√™me
  if ! validate_github_token "$GITHUB_TOKEN"; then
    err "Le token pass√© en variable d'env est invalide."
    exit 1
  fi
  ok "Token GitHub valid√© (env)."
fi

export GITHUB_TOKEN

# ---------- √Ä partir d‚Äôici seulement on agit ----------
require_root

# D√©pendances minimales (install qu‚Äôen cas de manque)
need_install=()
command -v curl   >/dev/null 2>&1 || need_install+=("curl")
command -v jq     >/dev/null 2>&1 || need_install+=("jq")
command -v gh     >/dev/null 2>&1 || need_install+=("gh")
command -v setfacl>/dev/null 2>&1 || need_install+=("acl")
if ((${#need_install[@]})); then
  log "Installation des d√©pendances manquantes: ${need_install[*]}"
  apt-get update -y >/dev/null 2>&1 || true
  apt-get install -y "${need_install[@]}" >/dev/null
  ok "D√©pendances install√©es: ${need_install[*]}"
else
  ok "D√©pendances d√©j√† pr√©sentes."
fi

# T√©l√©chargement & ex√©cution git-wrapper.sh
GIT_WRAPPER_URL="https://raw.githubusercontent.com/charlesvdd/administrator-neomnia/api-key-github/git-wrapper.sh"
GIT_WRAPPER_PATH="/usr/local/bin/git-wrapper.sh"
log "T√©l√©chargement git-wrapper.sh‚Ä¶"
curl -fsSL "$GIT_WRAPPER_URL" -o "$GIT_WRAPPER_PATH"
chmod +x "$GIT_WRAPPER_PATH"
log "Ex√©cution git-wrapper.sh‚Ä¶"
( set +u +x; GITHUB_TOKEN="$GITHUB_TOKEN" GH_TOKEN="$GITHUB_TOKEN" bash "$GIT_WRAPPER_PATH" ) >>"$LOGFILE" 2>&1 || {
  err "git-wrapper.sh a √©chou√© (voir $LOGFILE)"; exit 1; }
ok "git-wrapper.sh ex√©cut√©."

# Groupe + ajout user courant
AZ_USER="${SUDO_USER:-$(whoami)}"
if getent group "$GROUP_NAME" >/dev/null; then
  warn "Groupe ${GROUP_NAME} d√©j√† existant."
else
  groupadd "$GROUP_NAME"
  ok "Groupe ${GROUP_NAME} cr√©√©."
fi
if [[ -n "$AZ_USER" ]]; then
  usermod -a -G "$GROUP_NAME" "$AZ_USER"
  ok "Utilisateur ${AZ_USER} ajout√© au groupe ${GROUP_NAME}."
fi

# ACL utiles sur /opt
mkdir -p /opt
chown -R root:"$GROUP_NAME" /opt
chmod -R 2775 /opt
setfacl -R  -m g:"$GROUP_NAME":rwx /opt
setfacl -dR -m g:"$GROUP_NAME":rwx /opt
ok "ACL appliqu√©es sur /opt pour ${GROUP_NAME}."

ok "Termin√©. Groupe=${GROUP_NAME} | User=${AZ_USER} | Log=${LOGFILE}"
