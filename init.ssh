#!/bin/bash

#############################################
#   _            _        _                 #
#  | |          | |      | |                #
#  | |__     ___| |_ __ _| |__   ___  _ __  #
#  | '_ \   / _ \ __/ _` | '_ \ / _ \| '_ \ #
#  | |_) | |  __/ || (_| | |_) | (_) | | | |#
#  |_.__/   \___|\__\__,_|_.__/ \___/|_| |_|#
#                                           #
#      Basic Ubuntu Setup & UFW Firewall    #
#############################################

# -------------------------------------------
# Color definitions for nicer output
# -------------------------------------------
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[34m"
MAGENTA="\033[35m"
CYAN="\033[36m"
BOLD="\033[1m"
RESET="\033[0m"

# -------------------------------------------
# Init variables
# -------------------------------------------
TMP_SCRIPT_DIR="/tmp/scripts"
mkdir -p "$TMP_SCRIPT_DIR"

# Detect script path robustly
if [ -n "${BASH_SOURCE[0]}" ]; then
  SCRIPT_PATH=$(realpath "${BASH_SOURCE[0]}")
else
  SCRIPT_PATH=$(realpath "$0")
fi
SCRIPT_NAME=$(basename "$SCRIPT_PATH")
TMP_SCRIPT_PATH="$TMP_SCRIPT_DIR/$SCRIPT_NAME"

# Function to handle cleanup on exit
cleanup() {
  echo -e "${YELLOW}ðŸ§¹ Cleaning up temporary script copy...${RESET}"
  rm -f "$TMP_SCRIPT_PATH"
}
trap cleanup EXIT

# -------------------------------------------
# Copy self to temp directory
# -------------------------------------------
echo -e "${BLUE}${BOLD}Preparation:${RESET} Creating temp script copy..."
cp "$SCRIPT_PATH" "$TMP_SCRIPT_PATH"
chmod +x "$TMP_SCRIPT_PATH"
if [ $? -eq 0 ]; then
  echo -e "${GREEN}âœ” Temp script created: $TMP_SCRIPT_PATH${RESET}"
else
  echo -e "${RED}âœ– Failed to prepare temp script.${RESET}"
  exit 1
fi

# -------------------------------------------
# 1. Update the system
# -------------------------------------------
echo -e "${BLUE}${BOLD}Step 1/4:${RESET} ${YELLOW}Updating the system...${RESET}"
sudo apt update && sudo apt upgrade -y
if [ $? -eq 0 ]; then
  echo -e "${GREEN}âœ” System update completed.${RESET}"
else
  echo -e "${RED}âœ– System update failed.${RESET}"
  exit 1
fi

# -------------------------------------------
# 2. Install essential packages
# -------------------------------------------
echo -e "${BLUE}${BOLD}Step 2/4:${RESET} ${YELLOW}Installing essential packages (tree, ufw, git, curl, wget)...${RESET}"
sudo apt install -y tree ufw git curl wget
if [ $? -eq 0 ]; then
  echo -e "${GREEN}âœ” Packages installed.${RESET}"
else
  echo -e "${RED}âœ– Package installation failed.${RESET}"
  exit 1
fi

# -------------------------------------------
# 3. Configure UFW
# -------------------------------------------
echo -e "${BLUE}${BOLD}Step 3/4:${RESET} ${YELLOW}Configuring firewall (UFW)...${RESET}"
sudo ufw allow OpenSSH
sudo ufw --force enable
if [ $? -eq 0 ]; then
  echo -e "${GREEN}âœ” UFW enabled and SSH allowed.${RESET}"
else
  echo -e "${RED}âœ– UFW configuration failed.${RESET}"
  exit 1
fi

# -------------------------------------------
# 4. Apply root permissions to /var/backups
# -------------------------------------------
echo -e "${BLUE}${BOLD}Step 4/4:${RESET} ${YELLOW}Securing /var/backups for root access only...${RESET}"
sudo mkdir -p /var/backups
sudo chown -R root:root /var/backups
sudo chmod -R 700 /var/backups
if [ $? -eq 0 ]; then
  echo -e "${GREEN}âœ” Permissions set for /var/backups.${RESET}"
else
  echo -e "${RED}âœ– Failed to set /var/backups permissions.${RESET}"
  exit 1
fi

# -------------------------------------------
# Final success message
# -------------------------------------------
echo -e "${MAGENTA}${BOLD}############################################################${RESET}"
echo -e "${MAGENTA}${BOLD}#   âœ… Setup Complete! System & firewall configured.      #${RESET}"
echo -e "${MAGENTA}${BOLD}############################################################${RESET}"
