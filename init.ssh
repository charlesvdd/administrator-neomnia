#!/bin/bash
set -Eeuo pipefail

###########################################################################
#  Neomnia ‚Äî Kickstarter Azure (install & setup)
#  Licence : Charles Van den Driessche
#  Auteur  : @neomnia
#  Repo    : https://github.com/charlesvdd/administrator-neomnia/tree/azure
#  Version : 2025-08-31
###########################################################################

# üé® Couleurs pour les messages
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[34m"
MAGENTA="\033[35m"
CYAN="\033[36m"
BOLD="\033[1m"
RESET="\033[0m"

# üìù Configuration du logging
LOGFILE="/var/log/neomnia-setup.log"

# Cr√©er le fichier de log si n√©cessaire
create_logfile() {
    if ! mkdir -p "$(dirname "$LOGFILE")" 2>/dev/null; then
        LOGFILE="/tmp/neomnia-setup.log"
        mkdir -p "/tmp" 2>/dev/null || true
    fi
    touch "$LOGFILE" || {
        echo "Erreur : Impossible de cr√©er le fichier de log $LOGFILE."
        exit 1
    }
}

# Fonction pour logger les messages
log() {
    local timestamp
    timestamp="$(date '+%F %T')"
    echo -e "${CYAN}[Neomnia]${RESET} $*"
    echo -e "[$timestamp] [Neomnia] $*" | sed -r 's/\x1B\[[0-9;]*[mK]//g' >> "$LOGFILE"
}

ok() {
    log "${GREEN}‚úî${RESET} $*"
}

warn() {
    log "${YELLOW}‚ö†${RESET} $*"
}

err() {
    log "${RED}‚úñ${RESET} $*"
}

# üåÄ Spinner pour les commandes longues
spinner() {
    local pid="$1"
    local delay=0.1
    local spin='|/-\'
    while kill -0 "$pid" 2>/dev/null; do
        for ((i=0; i<${#spin}; i++)); do
            printf "\r${CYAN}[Neomnia]${RESET} ‚è≥ %c " "${spin:$i:1}"
            sleep "$delay"
        done
    done
    printf "\r${CYAN}[Neomnia]${RESET}    \b\b\b\b"
}

# Ex√©cuter une commande avec un spinner
run_with_spinner() {
    local msg="$1"
    shift
    log "$msg"
    ("$@" >> "$LOGFILE" 2>&1) &
    local pid=$!
    spinner "$pid"
    wait "$pid"
    local status=$?
    if [[ $status -ne 0 ]]; then
        err "$msg a √©chou√© (code $status). Consultez $LOGFILE pour plus de d√©tails."
        return $status
    else
        ok "$msg termin√©."
    fi
}

# Effet de machine √† √©crire
typewriter() {
    local text="$1"
    local delay="${2:-0.02}"
    local out=""
    for ((i=0; i<${#text}; i++)); do
        out+="${text:$i:1}"
        printf "\r${CYAN}[Neomnia]${RESET} %s" "$out"
        sleep "$delay"
    done
    echo
}

# Afficher le banner Neomnia
banner() {
    cat <<'EOF'
 _
| \ | | ___  _ __  ___| | __ _| |_ __ _ _ __ (_)_ __  ___
|  \| |/ _ \| '_ \/ __| |/ _` | __/ _` | '_ \| | '_ \/ __|
| |\  | (_) | | | \__ \ | (_| | || (_| | | | | | | | \__ \
|_| \_|\___/|_| |_|___/_|\__,_|\__\__,_|_| |_|_|_| |_|___/
                     Kickstarter ‚Ä¢ Azure
EOF
}

# üõ°Ô∏è V√©rification des pr√©requis
require_root() {
    if [[ "${EUID:-$(id -u)}" -ne 0 ]]; then
        err "Ce script doit √™tre ex√©cut√© en root (sudo)."
        exit 1
    fi
}

require_cmd() {
    local missing=()
    for cmd in "$@"; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            missing+=("$cmd")
        fi
    done
    if [[ ${#missing[@]} -gt 0 ]]; then
        err "Commandes manquantes : ${missing[*]}"
        exit 1
    fi
}

# üåê T√©l√©chargement et ex√©cution de scripts distants depuis GitHub
GITHUB_OWNER="charlesvdd"
GITHUB_REPO="administrator-neomnia"
GITHUB_BRANCH="azure"
RAW_BASE="https://raw.githubusercontent.com/${GITHUB_OWNER}/${GITHUB_REPO}/${GITHUB_BRANCH}"

fetch_raw() {
    local remote_path="$1"
    local dest="${2:-$(basename "$remote_path")}"
    log "T√©l√©chargement de ${BLUE}${RAW_BASE}/${remote_path}${RESET} vers $dest"
    if ! curl -fsSL "${RAW_BASE}/${remote_path}" -o "$dest"; then
        err "√âchec du t√©l√©chargement de ${RAW_BASE}/${remote_path}"
        return 1
    fi
    ok "Fichier t√©l√©charg√© : $dest"
}

run_raw() {
    local remote_path="$1"
    local tmp_file="/tmp/$(basename "$remote_path")"
    if ! fetch_raw "$remote_path" "$tmp_file"; then
        return 1
    fi
    chmod +x "$tmp_file"
    log "Ex√©cution du script ${BLUE}$remote_path${RESET}"
    if ! bash "$tmp_file"; then
        err "√âchec de l'ex√©cution du script $remote_path"
        return 1
    fi
}

# üöÄ D√©but du script
main() {
    create_logfile
    require_root
    banner

    typewriter "Initialisation de Neomnia Kickstarter Azure..." 0.03

    # Mise √† jour du syst√®me et installation des outils
    export DEBIAN_FRONTEND=noninteractive
    run_with_spinner "Mise √† jour du cache APT" apt-get update -y
    run_with_spinner "Mise √† jour des paquets" apt-get upgrade -y
    run_with_spinner "Installation des outils (curl, git, ufw, tree, wget, jq, acl)" \
        apt-get install -y curl git ufw tree wget jq acl

    # V√©rification des commandes n√©cessaires
    require_cmd curl jq ufw git setfacl acl

    # Configuration du groupe et des permissions sur /opt
    local GROUP_NAME="${NEO_GROUP:-gitusers}"
    log "Configuration du groupe ${BOLD}$GROUP_NAME${RESET}"

    if ! getent group "$GROUP_NAME" >/dev/null; then
        run_with_spinner "Cr√©ation du groupe $GROUP_NAME" groupadd "$GROUP_NAME"
    else
        warn "Le groupe $GROUP_NAME existe d√©j√†."
    fi

    # Ajout de l'utilisateur Azure au groupe
    local AZ_USER=""
    for user in azureuser admin ubuntu; do
        if id "$user" >/dev/null 2>&1; then
            AZ_USER="$user"
            break
        fi
    done

    if [[ -n "$AZ_USER" ]]; then
        run_with_spinner "Ajout de $AZ_USER au groupe $GROUP_NAME" \
            usermod -a -G "$GROUP_NAME" "$AZ_USER"
    else
        warn "Aucun utilisateur Azure (azureuser, admin, ubuntu) trouv√©. Ignorer l'ajout au groupe."
    fi

    # Configuration des permissions sur /opt
    mkdir -p /opt
    run_with_spinner "Configuration des permissions sur /opt" bash -c "
        chown -R root:'$GROUP_NAME' /opt &&
        chmod -R 2775 /opt &&
        setfacl -R -m g:'$GROUP_NAME':rwx /opt &&
        setfacl -dR -m g:'$GROUP_NAME':rwx /opt
    "

    # Configuration du pare-feu UFW
    if ! ufw status | grep -q "Status: active"; then
        run_with_spinner "Ouverture du port OpenSSH dans UFW" ufw allow OpenSSH
        run_with_spinner "Activation de UFW" ufw --force enable
    else
        warn "UFW est d√©j√† activ√©."
    fi

    # Configuration de Git
    if [[ -n "${GIT_EMAIL:-}" && -n "${GIT_NAME:-}" ]]; then
        git config --global user.email "$GIT_EMAIL"
        git config --global user.name "$GIT_NAME"
        ok "Configuration Git appliqu√©e."
    else
        warn "Les variables GIT_EMAIL et GIT_NAME ne sont pas d√©finies. Configuration Git ignor√©e."
    fi

    # R√©sum√© final
    echo -e "\n${MAGENTA}${BOLD}############## R√©sum√© ##############${RESET}"
    ok "Mise √† jour du syst√®me : termin√©e."
    ok "Installation des outils : termin√©e."
    ok "Configuration UFW : termin√©e."
    ok "Permissions sur /opt : configur√©es pour le groupe $GROUP_NAME."
    ok "Journal des op√©rations : $LOGFILE"
    echo -e "${MAGENTA}${BOLD}#####################################${RESET}\n"
}

# Ex√©cuter le script principal
main
