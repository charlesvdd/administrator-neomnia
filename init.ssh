#!/bin/bash
set -e
#############################################
#   Basic Ubuntu Setup (RAW aware)          #
#############################################

# --------------------------
# Color Definitions
# --------------------------
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[34m"
MAGENTA="\033[35m"
CYAN="\033[36m"
BOLD="\033[1m"
RESET="\033[0m"

echo -e "${CYAN}${BOLD}############################################################${RESET}"
echo -e "${CYAN}${BOLD}#   Starting Basic Ubuntu Setup & UFW Firewall             #${RESET}"
echo -e "${CYAN}${BOLD}############################################################${RESET}"
echo

# --------------------------
# Detect if the script is RAW (curl | bash) or local
# --------------------------
IS_RAW=0
if [[ -n "${BASH_SOURCE[0]}" && -f "${BASH_SOURCE[0]}" ]]; then
  SCRIPT_PATH=$(realpath "${BASH_SOURCE[0]}")
  SCRIPT_NAME=$(basename "$SCRIPT_PATH")
else
  IS_RAW=1
  SCRIPT_PATH="/dev/stdin"
  SCRIPT_NAME="raw-script"
fi

# --------------------------
# Check for root privileges
# --------------------------
if [ "$EUID" -ne 0 ]; then
  if [ "$IS_RAW" -eq 1 ]; then
    echo -e "${RED}âœ– This script must be run with sudo/root privileges.${RESET}"
    echo -e "${YELLOW}ðŸ’¡ Try again with: ${BOLD}curl ... | sudo bash${RESET}"
    exit 1
  else
    echo -e "${YELLOW}âš  This script needs to run as root. Relaunching with sudo...${RESET}"
    exec sudo bash "$SCRIPT_PATH" "$@"
  fi
fi

# --------------------------
# Prompt for user & group
# --------------------------
read -p "Enter the new user name: " NEW_USER_NAME
useradd -m "$NEW_USER_NAME"
echo -e "${GREEN}âœ” User '$NEW_USER_NAME' created.${RESET}"

read -s -p "Enter password for '$NEW_USER_NAME': " NEW_USER_PASSWORD
echo
echo "$NEW_USER_NAME:$NEW_USER_PASSWORD" | chpasswd
echo -e "${GREEN}âœ” Password set.${RESET}"

read -p "Enter the group name (default is gitusers): " GROUP_NAME
GROUP_NAME=${GROUP_NAME:-gitusers}

if ! getent group "$GROUP_NAME" >/dev/null; then
  groupadd "$GROUP_NAME"
  echo -e "${GREEN}âœ” Group '$GROUP_NAME' created.${RESET}"
else
  echo -e "${YELLOW}âš  Group '$GROUP_NAME' already exists.${RESET}"
fi

# --------------------------
# Prompt GitHub credentials
# --------------------------
read -p "Enter the GitHub username: " GITHUB_USERNAME
read -s -p "Enter the GitHub API key: " GITHUB_API_KEY
echo

# --------------------------
# Optional: copy script locally if not RAW
# --------------------------
TMP_SCRIPT_DIR="/tmp/scripts"
TMP_SCRIPT_PATH="$TMP_SCRIPT_DIR/$SCRIPT_NAME"
if [ "$IS_RAW" -eq 0 ]; then
  mkdir -p "$TMP_SCRIPT_DIR"
  cp "$SCRIPT_PATH" "$TMP_SCRIPT_PATH"
  chmod +x "$TMP_SCRIPT_PATH"
  trap 'rm -f "$TMP_SCRIPT_PATH"' EXIT
  echo -e "${GREEN}âœ” Script copied to ${TMP_SCRIPT_PATH}${RESET}"
else
  echo -e "${YELLOW}âš  RAW execution detected â€“ skipping temp copy.${RESET}"
fi

# --------------------------
# Step 1 â€“ System update
# --------------------------
echo -e "${BLUE}${BOLD}ðŸ”¹ Step 1/6:${RESET} Updating system..."
apt update && apt upgrade -y
echo -e "${GREEN}âœ” System updated.${RESET}"
echo

# --------------------------
# Step 2 â€“ Install essentials
# --------------------------
echo -e "${BLUE}${BOLD}ðŸ”¹ Step 2/6:${RESET} Installing packages..."
apt install -y tree ufw git curl wget
echo -e "${GREEN}âœ” Packages installed.${RESET}"
echo

# --------------------------
# Step 3 â€“ Configure UFW
# --------------------------
echo -e "${BLUE}${BOLD}ðŸ”¹ Step 3/6:${RESET} Configuring UFW firewall..."
ufw allow OpenSSH
ufw --force enable
echo -e "${GREEN}âœ” UFW enabled.${RESET}"
echo

# --------------------------
# Step 4 â€“ Set Git identity
# --------------------------
read -p "Enter your Git email: " GIT_EMAIL
read -p "Enter your Git username: " GIT_USERNAME
git config --global user.email "$GIT_EMAIL"
git config --global user.name "$GIT_USERNAME"
echo -e "${GREEN}âœ” Git identity configured.${RESET}"
echo

# --------------------------
# Step 5 â€“ Setup /var/backups/github
# --------------------------
echo -e "${BLUE}${BOLD}ðŸ”¹ Step 4/6:${RESET} Preparing shared Git directory..."
mkdir -p /var/backups/github
usermod -a -G "$GROUP_NAME" "$NEW_USER_NAME"
chown -R root:"$GROUP_NAME" /var/backups/github
chmod -R 2770 /var/backups/github
chmod 755 /var/backups
echo -e "${GREEN}âœ” Shared directory ready.${RESET}"
echo

# --------------------------
# Step 6 â€“ Secure backups dir
# --------------------------
echo -e "${BLUE}${BOLD}ðŸ”¹ Step 5/6:${RESET} Securing /var/backups..."
chown root:root /var/backups
chmod 755 /var/backups
echo -e "${GREEN}âœ” Root backup dir secured.${RESET}"
echo

# --------------------------
# Step 7 â€“ Test user access
# --------------------------
echo -e "${BLUE}${BOLD}ðŸ”¹ Step 6/6:${RESET} Testing user access..."
if sudo -u "$NEW_USER_NAME" test -w /var/backups/github; then
  echo -e "${GREEN}âœ” User '$NEW_USER_NAME' has write access to /var/backups/github.${RESET}"
else
  echo -e "${RED}âœ– Access test failed.${RESET}"
  echo -e "${YELLOW}â„¹ Suggestion: run ${BOLD}newgrp $GROUP_NAME${RESET}${YELLOW} or re-login as user.${RESET}"
fi
echo

# --------------------------
# Done
# --------------------------
echo -e "${MAGENTA}${BOLD}############################################################${RESET}"
echo -e "${MAGENTA}${BOLD}#   âœ… Setup Complete. Everything is configured.         #${RESET}"
echo -e "${MAGENTA}${BOLD}############################################################${RESET}"
