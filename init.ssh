#!/bin/bash
set -e
#############################################
#   Basic Ubuntu Setup & Permanent Bash     #
#############################################

# --------------------------
# Ensure running under bash
# --------------------------
if [ -z "$BASH_VERSION" ]; then
  echo "Switching to bash..."
  exec bash "$0" "$@"
fi

echo -e "Running under Bash version: $BASH_VERSION ($(which bash))"
echo

# --------------------------
# Color Definitions
# --------------------------
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[34m"
MAGENTA="\033[35m"
CYAN="\033[36m"
BOLD="\033[1m"
RESET="\033[0m"

echo -e "${CYAN}${BOLD}############################################################${RESET}"
echo -e "${CYAN}${BOLD}#   Starting Basic Ubuntu Setup & UFW Firewall             #${RESET}"
echo -e "${CYAN}${BOLD}############################################################${RESET}"
echo

# --------------------------
# Detect raw or local file
# --------------------------
IS_RAW=0
if [[ -n "${BASH_SOURCE[0]}" && -f "${BASH_SOURCE[0]}" ]]; then
  SCRIPT_PATH=$(realpath "${BASH_SOURCE[0]}")
  SCRIPT_NAME=$(basename "$SCRIPT_PATH")
else
  IS_RAW=1
  SCRIPT_PATH="/dev/stdin"
  SCRIPT_NAME="raw-script"
fi

# --------------------------
# Privilege check
# --------------------------
if [ "$EUID" -ne 0 ]; then
  if [ "$IS_RAW" -eq 1 ]; then
    echo -e "${RED}âœ– This script needs root privileges.${RESET}"
    echo -e "${YELLOW}ðŸ’¡ Try: curl ... | sudo bash${RESET}"
    exit 1
  else
    echo -e "${YELLOW}âš  Relaunching with sudo...${RESET}"
    exec sudo bash "$SCRIPT_PATH" "$@"
  fi
fi

# --------------------------
# Hostname setup
# --------------------------
read -p "Enter the new hostname: " NEW_HOSTNAME
echo -e "${BLUE}ðŸ”¹ Setting hostname to '$NEW_HOSTNAME'...${RESET}"
hostnamectl set-hostname "$NEW_HOSTNAME"
grep -q "127\.0\.1\.1" /etc/hosts && \
  sed -i "s/127\.0\.1\.1.*/127.0.1.1\t$NEW_HOSTNAME/" /etc/hosts || \
  echo -e "127.0.1.1\t$NEW_HOSTNAME" >> /etc/hosts
echo "$NEW_HOSTNAME" > /etc/hostname
echo -e "${GREEN}âœ” Hostname is now $NEW_HOSTNAME${RESET}"
echo

# --------------------------
# User & group setup
# --------------------------
read -p "Enter the new user name: " NEW_USER_NAME
useradd -m -s /bin/bash "$NEW_USER_NAME"
chsh -s /bin/bash "$NEW_USER_NAME"
echo -e "${GREEN}âœ” User '$NEW_USER_NAME' created with shell $(getent passwd "$NEW_USER_NAME" | cut -d: -f7)${RESET}"

read -s -p "Enter password for '$NEW_USER_NAME': " NEW_USER_PASSWORD
echo
echo "$NEW_USER_NAME:$NEW_USER_PASSWORD" | chpasswd
echo -e "${GREEN}âœ” Password set.${RESET}"

echo
read -p "Enter the group name (default gitusers): " GROUP_NAME
GROUP_NAME=${GROUP_NAME:-gitusers}
if ! getent group "$GROUP_NAME" >/dev/null; then
  groupadd "$GROUP_NAME"
  echo -e "${GREEN}âœ” Group '$GROUP_NAME' created.${RESET}"
else
  echo -e "${YELLOW}âš  Group '$GROUP_NAME' exists.${RESET}"
fi

# --------------------------
# Customize user .bashrc
# --------------------------
BASHRC_FILE="/home/$NEW_USER_NAME/.bashrc"
echo -e "\n# Custom prompt: user@hostname in color" >> "$BASHRC_FILE"
echo "export PS1='\\[\\e[32m\\]\u@\\h\\[\\e[0m\\]:\\[\\e[34m\\]\w\\[\\e[0m\\]\\$ '" >> "$BASHRC_FILE"
chown "$NEW_USER_NAME:$NEW_USER_NAME" "$BASHRC_FILE"
echo -e "${GREEN}âœ” Updated .bashrc for custom prompt.${RESET}"
echo

# --------------------------
# GitHub credentials
# --------------------------
read -p "GitHub username: " GITHUB_USERNAME
read -s -p "GitHub API key: " GITHUB_API_KEY
echo

# --------------------------
# Copy script locally
# --------------------------
TMP_DIR="/tmp/scripts"
if [ "$IS_RAW" -eq 0 ]; then
  mkdir -p "$TMP_DIR"
  cp "$SCRIPT_PATH" "$TMP_DIR/$SCRIPT_NAME"
  chmod +x "$TMP_DIR/$SCRIPT_NAME"
  trap 'rm -f "$TMP_DIR/$SCRIPT_NAME"' EXIT
  echo -e "${GREEN}âœ” Script copied to $TMP_DIR/${SCRIPT_NAME}${RESET}"
else
  echo -e "${YELLOW}âš  RAW execution â€“ skipping copy${RESET}"
fi

echo
# --------------------------
# Steps
# --------------------------
echo -e "${BLUE}${BOLD}ðŸ”¹ Step 1/7:${RESET} Updating system..."
apt update && apt upgrade -y && echo -e "${GREEN}âœ” Updated.${RESET}"

echo -e "${BLUE}${BOLD}ðŸ”¹ Step 2/7:${RESET} Installing essentials..."
apt install -y tree ufw git curl wget && echo -e "${GREEN}âœ” Installed.${RESET}"

echo -e "${BLUE}${BOLD}ðŸ”¹ Step 3/7:${RESET} Configuring UFW..."
ufw allow OpenSSH && ufw --force enable && echo -e "${GREEN}âœ” UFW enabled.${RESET}"

echo -e "${BLUE}${BOLD}ðŸ”¹ Step 4/7:${RESET} Setting Git config..."
read -p "Git email: " GIT_EMAIL
read -p "Git username: " GIT_CONF_USERNAME
git config --global user.email "$GIT_EMAIL"
git config --global user.name "$GIT_CONF_USERNAME"
echo -e "${GREEN}âœ” Git configured.${RESET}"

echo -e "${BLUE}${BOLD}ðŸ”¹ Step 5/7:${RESET} Preparing /var/backups/github..."
mkdir -p /var/backups/github
usermod -a -G "$GROUP_NAME" "$NEW_USER_NAME"
chown root:"$GROUP_NAME" /var/backups/github
chmod 2770 /var/backups/github && echo -e "${GREEN}âœ” Directory ready.${RESET}"

echo -e "${BLUE}${BOLD}ðŸ”¹ Step 6/7:${RESET} Securing /var/backups..."
chown root:root /var/backups
chmod 755 /var/backups && echo -e "${GREEN}âœ” Secured.${RESET}"

echo -e "${BLUE}${BOLD}ðŸ”¹ Step 7/7:${RESET} Testing access..."
if sudo -u "$NEW_USER_NAME" test -w /var/backups/github; then
  echo -e "${GREEN}âœ” Write access OK.${RESET}"
else
  echo -e "${RED}âœ– Write access failed.${RESET}"
  echo -e "${YELLOW}â„¹ run 'newgrp $GROUP_NAME' or re-login${RESET}"
fi

echo -e "${MAGENTA}${BOLD}############################################################${RESET}"
echo -e "${MAGENTA}${BOLD}#                   Setup Complete                     #${RESET}"
echo -e "${MAGENTA}${BOLD}############################################################${RESET}"
echo -e "${BLUE}Summary:${RESET} Hostname=$NEW_HOSTNAME, User=$NEW_USER_NAME, Group=$GROUP_NAME, Shell=$(getent passwd "$NEW_USER_NAME" | cut -d: -f7)"
