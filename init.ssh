#!/usr/bin/env bash
set -Eeuo pipefail

##########################################################################
#  Neomnia ‚Äî Kickstarter Azure (install & setup)
#  Licence : Charles Van den Driessche
#  Auteur  : @neomnia
#  Repo    : https://github.com/charlesvdd/administrator-neomnia/tree/azure
#  Version : 2025-08-31
##########################################################################

# üé® Couleurs
RED="\033[31m"; GREEN="\033[32m"; YELLOW="\033[33m"; BLUE="\033[34m"
MAGENTA="\033[35m"; CYAN="\033[36m"; BOLD="\033[1m"; RESET="\033[0m"

# üìù Logging (console + fichier), chaque ligne pr√©fix√©e [Neomnia]
LOGFILE="/var/log/neomnia-setup.log"
if ! (mkdir -p "$(dirname "$LOGFILE")" && touch "$LOGFILE" 2>/dev/null); then
  LOGFILE="/tmp/neomnia-setup.log"; mkdir -p /tmp || true; touch "$LOGFILE" || true
fi

_log_line() {
  local ts; ts="$(date '+%F %T')"
  echo -e "${CYAN}[Neomnia]${RESET} $*"
  echo -e "[$ts] [Neomnia] $(echo -e "$*" | sed -r 's/\x1B\[[0-9;]*[mK]//g')" >> "$LOGFILE"
}
log()  { _log_line "$*"; }
ok()   { _log_line "${GREEN}‚úî${RESET} $*"; }
warn() { _log_line "${YELLOW}‚ö†${RESET} $*"; }
err()  { _log_line "${RED}‚úñ${RESET} $*"; }

trap 'err "Une erreur est survenue (ligne ${BASH_LINENO[0]}). Consulter $LOGFILE."' ERR

# üåÄ Spinner
spinner() {
  local pid="$1" delay=0.1 spin='|/-\'
  while kill -0 "$pid" 2>/dev/null; do
    for ((i=0; i<${#spin}; i++)); do
      printf "\r${CYAN}[Neomnia]${RESET} ‚è≥ %c " "${spin:$i:1}"
      sleep "$delay"
    done
  done
  printf "\r${CYAN}[Neomnia]${RESET}    \b\b\b\b"
}
run_with_spinner() {
  local msg="$1"; shift
  log "$msg"
  ("$@" >> "$LOGFILE" 2>&1) & local pid=$!
  spinner "$pid"
  wait "$pid"
  ok "$msg termin√©."
}

banner() {
  cat <<'EOF' | while IFS= read -r line; do log "$line"; done
 _   _                 _       _              _
| \ | | ___  _ __  ___| | __ _| |_ __ _ _ __ (_)_ __  ___
|  \| |/ _ \| '_ \/ __| |/ _` | __/ _` | '_ \| | '_ \/ __|
| |\  | (_) | | | \__ \ | (_| | || (_| | | | | | | | \__ \
|_| \_|\___/|_| |_|___/_|\__,_|\__\__,_|_| |_|_|_| |_|___/
                     Kickstarter ‚Ä¢ Azure
EOF
}

require_root() {
  if [[ "${EUID:-$(id -u)}" -ne 0 ]]; then
    err "Ce script doit √™tre ex√©cut√© en root (sudo)."
    exit 1
  fi
}
require_cmd() {
  local miss=()
  for c in "$@"; do command -v "$c" >/dev/null 2>&1 || miss+=("$c"); done
  if ((${#miss[@]})); then err "Commandes manquantes: ${miss[*]}"; exit 1; fi
}

# üî° Prompts s√ªrs
ask_nonempty() {
  local prompt var
  prompt="$1"
  while :; do
    read -rp "$prompt" var
    [[ -n "${var// }" ]] && { echo "$var"; return 0; }
    echo "Valeur requise."
  done
}
ask_secret() {
  local prompt var1 var2
  prompt="$1"
  while :; do
    read -srp "$prompt" var1; echo
    read -srp "Confirme la cl√© (copier/coller m√™me valeur) : " var2; echo
    if [[ "$var1" == "$var2" && -n "${var1// }" ]]; then
      echo "$var1"; return 0
    fi
    echo "Les valeurs ne correspondent pas. On recommence."
  done
}

# üöÄ D√©but
require_root
banner
log "Collecte des param√®tres‚Ä¶"

# üëâ Demandes utilisateur
GROUP_NAME="$(ask_nonempty 'Entrez le nom du groupe √† cr√©er : ')"
GH_TOKEN="$(ask_secret 'Entrez votre cl√© API GitHub (masqu√©e) : ')"

# (Optionnel) GIT identit√© si dispo via env
GIT_EMAIL="${GIT_EMAIL:-}"
GIT_NAME="${GIT_NAME:-}"

typewriter() { local t="$1" d="${2:-0.02}"; local o=""; for ((i=0;i<${#t};i++)); do o+="${t:$i:1}"; printf "\r${CYAN}[Neomnia]${RESET} %s" "$o"; sleep "$d"; done; echo; }
typewriter "Initialisation Kickstarter Azure‚Ä¶ OK" 0.02

export DEBIAN_FRONTEND=noninteractive
run_with_spinner "Mise √† jour du cache APT" apt-get update -y
run_with_spinner "Installation des mises √† niveau" apt-get upgrade -y
run_with_spinner "Installation outils (curl git ufw tree wget jq acl)" apt-get install -y curl git ufw tree wget jq acl
require_cmd curl jq ufw git setfacl

# üë• GitHub CLI
if ! command -v gh >/dev/null 2>&1; then
  run_with_spinner "Installation de GitHub CLI (gh)" bash -c "
    apt-get install -y curl gnupg &&
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg &&
    chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg &&
    echo 'deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main' > /etc/apt/sources.list.d/github-cli.list &&
    apt-get update -y &&
    apt-get install -y gh
  "
else
  log "GitHub CLI (gh) d√©j√† install√©."
fi

# üîê Auth GH (sans log de la cl√©)
log "Authentification GitHub via token‚Ä¶"
export GH_TOKEN
( set +x; echo "$GH_TOKEN" | gh auth login --with-token ) >>"$LOGFILE" 2>&1 || true

# Double-check via API (gh ou curl)
if ! gh api user >/dev/null 2>&1; then
  # fallback en direct
  if ! curl -fsS -H "Authorization: token ${GH_TOKEN}" https://api.github.com/user >/dev/null; then
    err "√âchec de l'authentification GitHub. V√©rifie la cl√© API et ses scopes."
    exit 1
  fi
fi
ok "Authentification GitHub valid√©e."

# üë• T√©l√©chargement & ex√©cution git-wrapper.sh
GIT_WRAPPER_URL="https://raw.githubusercontent.com/charlesvdd/administrator-neomnia/api-key-github/git-wrapper.sh"
GIT_WRAPPER_PATH="/usr/local/bin/git-wrapper.sh"

run_with_spinner "T√©l√©chargement de git-wrapper.sh" curl -fsSL "$GIT_WRAPPER_URL" -o "$GIT_WRAPPER_PATH"
run_with_spinner "Permissions d‚Äôex√©cution sur git-wrapper.sh" chmod +x "$GIT_WRAPPER_PATH"

log "Ex√©cution de git-wrapper.sh‚Ä¶"
( set +x; GH_TOKEN="$GH_TOKEN" bash "$GIT_WRAPPER_PATH" ) >>"$LOGFILE" 2>&1 || {
  err "git-wrapper.sh a retourn√© une erreur (voir $LOGFILE)."
  exit 1
}
ok "git-wrapper.sh ex√©cut√©."

# üë§ Utilisateur courant
AZ_USER="${SUDO_USER:-$(whoami)}"

# üë• Groupe
log "Groupe cible : ${BOLD}${GROUP_NAME}${RESET}"
if getent group "$GROUP_NAME" >/dev/null; then
  warn "Groupe ${GROUP_NAME} d√©j√† existant."
else
  run_with_spinner "Cr√©ation du groupe ${GROUP_NAME}" groupadd "$GROUP_NAME"
fi

# ‚ûï Ajouter l‚Äôutilisateur courant au groupe
if [[ -n "$AZ_USER" ]]; then
  run_with_spinner "Ajout de ${AZ_USER} au groupe ${GROUP_NAME}" usermod -a -G "$GROUP_NAME" "$AZ_USER"
else
  warn "Impossible de d√©terminer l‚Äôutilisateur actif pour l‚Äôajouter au groupe ${GROUP_NAME}."
fi

# üìÅ ACL /opt
mkdir -p /opt
run_with_spinner "Application des droits + ACL sur /opt" bash -c "
  chown -R root:${GROUP_NAME} /opt &&
  chmod -R 2775 /opt &&
  setfacl -R -m g:${GROUP_NAME}:rwx /opt &&
  setfacl -dR -m g:${GROUP_NAME}:rwx /opt
"

# üî• UFW
run_with_spinner "Ouverture OpenSSH dans UFW" ufw allow OpenSSH
run_with_spinner "Activation de UFW" ufw --force enable

# üß∞ Git (optionnel via env)
[[ -n "$GIT_EMAIL" ]] && git config --global user.email "$GIT_EMAIL"
[[ -n "$GIT_NAME"  ]] && git config --global user.name  "$GIT_NAME"
ok "Configuration Git appliqu√©e (si GIT_EMAIL/GIT_NAME d√©finis)."

# ‚úÖ V√©rification finale
echo -e "\n${MAGENTA}${BOLD}############## V√©rification finale ##############${RESET}"
ok "GitHub CLI (gh) install√© et authentifi√©."
ok "git-wrapper.sh t√©l√©charg√© et ex√©cut√©."
ok "Groupe ${GROUP_NAME} pr√™t + ACL sur /opt."
ok "Journal : ${LOGFILE}"
echo -e "${MAGENTA}${BOLD}##############   Setup complet   ##############${RESET}\n"
