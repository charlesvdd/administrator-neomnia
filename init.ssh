#!/bin/bash
set -Eeuo pipefail

###########################################################################
#  Neomnia ‚Äî Kickstarter Azure (install & setup)
#  Licence : Charles Van den Driessche
#  Auteur  : @neomnia
#  Repo    : https://github.com/charlesvdd/administrator-neomnia/tree/azure
#  Version : 2025-08-31
###########################################################################

# üé® Couleurs
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[34m"
MAGENTA="\033[35m"
CYAN="\033[36m"
BOLD="\033[1m"
RESET="\033[0m"

# üìù Logging
LOGFILE="/var/log/neomnia-setup.log"
mkdir -p "$(dirname "$LOGFILE")" || true
touch "$LOGFILE" || LOGFILE="/tmp/neomnia-setup.log"

_log_line() {
    local ts
    ts="$(date '+%F %T')"
    echo -e "${CYAN}[Neomnia]${RESET} $*"
    echo -e "[$ts] [Neomnia] $(echo -e "$*" | sed -r 's/\x1B\[[0-9;]*[mK]//g')" >> "$LOGFILE"
}

log() {
    _log_line "$@"
}

ok() {
    _log_line "${GREEN}‚úî${RESET} $@"
}

warn() {
    _log_line "${YELLOW}‚ö†${RESET} $@"
}

err() {
    _log_line "${RED}‚úñ${RESET} $@"
}

# Gestion des erreurs
trap 'err "Une erreur est survenue (ligne ${BASH_LINENO[0]}). Consultez $LOGFILE pour plus de d√©tails."' ERR

# üåÄ Spinner & animations
spinner() {
    local pid="$1"
    local delay=0.1
    local spin='|/-\'
    while kill -0 "$pid" 2>/dev/null; do
        for ((i=0; i<${#spin}; i++)); do
            printf "\r${CYAN}[Neomnia]${RESET} ‚è≥ %c " "${spin:$i:1}"
            sleep "$delay"
        done
    done
    printf "\r${CYAN}[Neomnia]${RESET}    \b\b\b\b"
}

run_with_spinner() {
    local msg="$1"
    shift
    log "$msg"
    ("$@" >> "$LOGFILE" 2>&1)
    local status=$?
    if [[ $status -ne 0 ]]; then
        err "$msg a √©chou√© (code $status). Consultez $LOGFILE pour plus de d√©tails."
        return $status
    else
        ok "$msg termin√©."
    fi
}

typewriter() {
    local text="$1"
    local delay="${2:-0.02}"
    local out=""
    for ((i=0; i<${#text}; i++)); do
        out+="${text:$i:1}"
        printf "\r${CYAN}[Neomnia]${RESET} %s" "$out"
        sleep "$delay"
    done
    echo
}

banner() {
    cat <<'EOF' | while IFS= read -r line; do
        log "$line"
    done
 _
| \ | | ___  _ __  ___| | __ _| |_ __ _ _ __ (_)_ __  ___
|  \| |/ _ \| '_ \/ __| |/ _` | __/ _` | '_ \| | '_ \/ __|
| |\  | (_) | | | \__ \ | (_| | || (_| | | | | | | | \__ \
|_| \_|\___/|_| |_|___/_|\__,_|\__\__,_|_| |_|_|_| |_|___/
                     Kickstarter ‚Ä¢ Azure
EOF
}

# üõ°Ô∏è Pr√©requis
require_root() {
    if [[ "${EUID:-$(id -u)}" -ne 0 ]]; then
        err "Ce script doit √™tre ex√©cut√© en root (sudo)."
        exit 1
    fi
}

require_cmd() {
    local miss=()
    for c in "$@"; do
        if ! command -v "$c" >/dev/null 2>&1; then
            miss+=("$c")
        fi
    done
    if ((${#miss[@]})); then
        err "Commandes manquantes: ${miss[*]}"
        exit 1
    fi
}

# üåê RAW GitHub helpers
GITHUB_OWNER="charlesvdd"
GITHUB_REPO="administrator-neomnia"
GITHUB_BRANCH="azure"
RAW_BASE="https://raw.githubusercontent.com/${GITHUB_OWNER}/${GITHUB_REPO}/${GITHUB_BRANCH}"

fetch_raw() {
    local remote="$1"
    local dest="${2:-$(basename "$1")}"
    log "T√©l√©chargement RAW : ${BLUE}${RAW_BASE}/${remote}${RESET} ‚Üí ${dest}"
    if ! curl -fsSL "${RAW_BASE}/${remote}" -o "$dest"; then
        err "√âchec du t√©l√©chargement de ${RAW_BASE}/${remote}"
        return 1
    fi
    ok "Fichier r√©cup√©r√©: $dest"
}

run_raw() {
    local remote="$1"
    local tmp="/tmp/$(basename "$remote")"
    fetch_raw "$remote" "$tmp" || return 1
    chmod +x "$tmp"
    log "Ex√©cution du script RAW: ${BLUE}$remote${RESET}"
    if ! bash "$tmp"; then
        err "√âchec de l'ex√©cution du script $remote"
        return 1
    fi
}

# üöÄ D√©but du script
require_root
banner
typewriter "Login Neomnia‚Ä¶ OK" 0.03
typewriter "Chargement des modules‚Ä¶ OK" 0.02
typewriter "Initialisation Kickstarter Azure‚Ä¶ OK" 0.02

export DEBIAN_FRONTEND=noninteractive

# Mise √† jour et installation des outils
run_with_spinner "Mise √† jour du cache APT" apt-get update -y
run_with_spinner "Installation des mises √† niveau" apt-get upgrade -y
run_with_spinner "Installation des outils (curl git ufw tree wget jq acl)" apt-get install -y curl git ufw tree wget jq acl

# V√©rification des commandes n√©cessaires
require_cmd curl jq ufw git setfacl acl

# üë• Groupe + ACL /opt
GROUP_NAME="${NEO_GROUP:-${GROUP_NAME:-gitusers}}"
log "Groupe cible: ${BOLD}${GROUP_NAME}${RESET}"

if ! getent group "$GROUP_NAME" >/dev/null; then
    run_with_spinner "Cr√©ation du groupe ${GROUP_NAME}" groupadd "$GROUP_NAME"
else
    warn "Groupe ${GROUP_NAME} d√©j√† existant."
fi

# Ajout de l'utilisateur au groupe
AZ_USER=""
for u in azureuser admin ubuntu; do
    if id "$u" >/dev/null 2>&1; then
        AZ_USER="$u"
        break
    fi
done

if [[ -n "$AZ_USER" ]]; then
    run_with_spinner "Ajout de ${AZ_USER} au groupe ${GROUP_NAME}" usermod -a -G "$GROUP_NAME" "$AZ_USER"
else
    warn "Aucun utilisateur 'azureuser/admin/ubuntu' d√©tect√© ‚Äî saut de l‚Äôajout au groupe."
fi

# Configuration des permissions sur /opt
mkdir -p /opt
if [[ -d "/opt" && "$(ls -A /opt 2>/dev/null)" ]]; then
    warn "/opt n'est pas vide. V√©rifiez que les permissions actuelles ne causeront pas de probl√®mes."
fi

run_with_spinner "Application des droits + ACL sur /opt" bash -c "
    chown -R root:'$GROUP_NAME' /opt &&
    chmod -R 2775 /opt &&
    setfacl -R -m g:'$GROUP_NAME':rwx /opt &&
    setfacl -dR -m g:'$GROUP_NAME':rwx /opt
"

# üî• Configuration UFW
if ! ufw status | grep -q "Status: active"; then
    run_with_spinner "Ouverture OpenSSH dans UFW" ufw allow OpenSSH
    run_with_spinner "Activation de UFW" ufw --force enable
else
    warn "UFW est d√©j√† activ√©."
fi

# üß∞ Configuration Git
GIT_CONFIGURED="non configur√©e"
if [[ -n "${GIT_EMAIL:-}" && -n "${GIT_NAME:-}" ]]; then
    git config --global user.email "$GIT_EMAIL"
    git config --global user.name "$GIT_NAME"
    GIT_CONFIGURED="configur√©e"
    ok "Configuration Git appliqu√©e."
else
    warn "Les variables GIT_EMAIL et/ou GIT_NAME ne sont pas d√©finies. La configuration Git a √©t√© ignor√©e."
fi

# V√©rification finale
echo -e "\n${MAGENTA}${BOLD}############## R√©sum√© des actions ##############${RESET}"
ok "Mise √† jour du cache APT : termin√©e."
ok "Installation des outils (curl, git, ufw, etc.) : termin√©e."
ok "Configuration UFW : termin√©e."
ok "Configuration Git : $GIT_CONFIGURED."
ok "Permissions sur /opt : appliqu√©es au groupe $GROUP_NAME."
ok "Journal : ${LOGFILE}"
echo -e "${MAGENTA}${BOLD}################################################${RESET}\n"
