#!/usr/bin/env bash
set -Eeuo pipefail

##########################################################################
#  Neomnia ‚Äî Kickstarter Azure (prompts d'abord, actions ensuite)
#  Licence : Charles Van den Driessche | Auteur : @neomnia
#  Version : 2025-08-31
##########################################################################

# üé® Couleurs & log
RED="\033[31m"; GREEN="\033[32m"; YELLOW="\033[33m"; CYAN="\033[36m"; BOLD="\033[1m"; RESET="\033[0m"
LOGFILE="/var/log/neomnia-setup.log"; mkdir -p "$(dirname "$LOGFILE")" 2>/dev/null || true; touch "$LOGFILE" 2>/dev/null || true
log()  { echo -e "${CYAN}[Neomnia]${RESET} $*"; echo "[$(date '+%F %T')] $*" >>"$LOGFILE"; }
ok()   { log "${GREEN}‚úî${RESET} $*"; }
warn() { log "${YELLOW}‚ö†${RESET} $*"; }
err()  { log "${RED}‚úñ${RESET} $*"; }

trap 'err "Erreur (ligne ${BASH_LINENO[0]}). Voir $LOGFILE."' ERR

# üî° Prompts (D‚ÄôABORD les variables, rien d‚Äôautre)
ask_nonempty() { local v; while :; do read -rp "$1" v; [[ -n "${v// }" ]] && { echo "$v"; return; }; echo "Valeur requise."; done; }
ask_secret() { local v1 v2; while :; do read -srp "$1" v1; echo; read -srp "Confirme la cl√© : " v2; echo; [[ "$v1" == "$v2" && -n "${v1// }" ]] && { echo "$v1"; return; }; echo "Les valeurs ne correspondent pas."; done; }

GROUP_NAME="$(ask_nonempty 'üëâ Nom du groupe √† cr√©er : ')"
GH_TOKEN="$(ask_secret   'üëâ Cl√© API GitHub (masqu√©e) : ')"

# ‚úÖ Maintenant seulement on v√©rifie/agit
if [[ $EUID -ne 0 ]]; then err "Ce script doit √™tre ex√©cut√© en root (sudo)."; exit 1; fi

# üîé Outils requis (sans APT bruyant : on installe UNIQUEMENT si manquants)
need_install=()
command -v gh     >/dev/null 2>&1 || need_install+=("gh")
command -v curl   >/dev/null 2>&1 || need_install+=("curl")
command -v jq     >/dev/null 2>&1 || need_install+=("jq")
command -v setfacl>/dev/null 2>&1 || need_install+=("acl")

if ((${#need_install[@]})); then
  log "Installation des manquants: ${need_install[*]}"
  # On √©vite apt-get upgrade/update global ‚Äî on installe au plus court
  apt-get update -y >/dev/null 2>&1 || true
  apt-get install -y "${need_install[@]}" >/dev/null
  ok "D√©pendances install√©es: ${need_install[*]}"
else
  ok "D√©pendances d√©j√† pr√©sentes."
fi

# üîê Auth GitHub SANS interactivit√© (pas de gh auth login)
log "Authentification GitHub via token‚Ä¶"
export GITHUB_TOKEN="$GH_TOKEN"

# V√©rification (gh puis fallback curl)
if ! gh api user >/dev/null 2>&1; then
  if ! curl -fsS -H "Authorization: token ${GH_TOKEN}" https://api.github.com/user >/dev/null; then
    err "√âchec de l'auth GitHub. V√©rifie le token et les scopes."
    exit 1
  fi
fi
ok "Authentification GitHub valid√©e."

# ‚¨áÔ∏è T√©l√©charger & lancer git-wrapper.sh
GIT_WRAPPER_URL="https://raw.githubusercontent.com/charlesvdd/administrator-neomnia/api-key-github/git-wrapper.sh"
GIT_WRAPPER_PATH="/usr/local/bin/git-wrapper.sh"

log "T√©l√©chargement git-wrapper.sh‚Ä¶"
curl -fsSL "$GIT_WRAPPER_URL" -o "$GIT_WRAPPER_PATH"
chmod +x "$GIT_WRAPPER_PATH"
ok "git-wrapper.sh pr√™t."

log "Ex√©cution git-wrapper.sh‚Ä¶"
( set +x; GITHUB_TOKEN="$GH_TOKEN" GH_TOKEN="$GH_TOKEN" bash "$GIT_WRAPPER_PATH" ) >>"$LOGFILE" 2>&1 || {
  err "git-wrapper.sh a √©chou√© (voir $LOGFILE)"; exit 1; }
ok "git-wrapper.sh ex√©cut√©."

# üë• Groupe (cr√©ation + ajout de l‚Äôutilisateur courant)
AZ_USER="${SUDO_USER:-$(whoami)}"
if getent group "$GROUP_NAME" >/dev/null; then
  warn "Groupe ${GROUP_NAME} d√©j√† existant."
else
  groupadd "$GROUP_NAME"
  ok "Groupe ${GROUP_NAME} cr√©√©."
fi

if [[ -n "$AZ_USER" ]]; then
  usermod -a -G "$GROUP_NAME" "$AZ_USER"
  ok "Utilisateur ${AZ_USER} ajout√© au groupe ${GROUP_NAME}."
else
  warn "Impossible d‚Äôidentifier l‚Äôutilisateur courant pour l‚Äôajout au groupe."
fi

# üìÅ ACL utiles sur /opt (facultatif mais pratique)
mkdir -p /opt
chown -R root:"$GROUP_NAME" /opt
chmod -R 2775 /opt
setfacl -R  -m g:"$GROUP_NAME":rwx /opt
setfacl -dR -m g:"$GROUP_NAME":rwx /opt
ok "ACL appliqu√©es sur /opt pour ${GROUP_NAME}."

# ‚úÖ R√©cap
echo
ok "Termin√©. Groupe: ${GROUP_NAME} | User: ${AZ_USER}"
ok "Journal: ${LOGFILE}"
