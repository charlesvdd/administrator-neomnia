#!/bin/bash

#############################################
#   _            _        _                 #
#  | |          | |      | |                #
#  | |__     ___| |_ __ _| |__   ___  _ __  #
#  | '_ \   / _ \ __/ _` | '_ \ / _ \| '_ \ #
#  | |_) | |  __/ || (_| | |_) | (_) | | | |#
#  |_.__/   \___|\__\__,_|_.__/ \___/|_| |_|#
#                                           #
#     Basic Ubuntu Setup (RAW aware)        #
#############################################

# --------------------------
# Color Definitions
# --------------------------
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[34m"
MAGENTA="\033[35m"
CYAN="\033[36m"
BOLD="\033[1m"
RESET="\033[0m"

echo -e "${CYAN}${BOLD}############################################################${RESET}"
echo -e "${CYAN}${BOLD}#   Starting Basic Ubuntu Setup & UFW Firewall           #${RESET}"
echo -e "${CYAN}${BOLD}############################################################${RESET}"
echo

# --------------------------
# Check for root privileges
# --------------------------
if [ "$EUID" -ne 0 ]; then
  echo -e "${YELLOW}⚠ This script needs to run as root. Trying sudo...${RESET}"
  exec sudo bash "$0" "$@"
fi

# --------------------------
# Script Metadata (detect if RAW or FILE)
# --------------------------
IS_RAW=0
if [[ -n "${BASH_SOURCE[0]}" && -f "${BASH_SOURCE[0]}" ]]; then
  SCRIPT_PATH=$(realpath "${BASH_SOURCE[0]}")
  SCRIPT_NAME=$(basename "$SCRIPT_PATH")
else
  IS_RAW=1
  SCRIPT_PATH="/dev/stdin"
  SCRIPT_NAME="raw-script"
fi

# --------------------------
# If not RAW, copy to /tmp/scripts
# --------------------------
TMP_SCRIPT_DIR="/tmp/scripts"
TMP_SCRIPT_PATH="$TMP_SCRIPT_DIR/$SCRIPT_NAME"

if [ "$IS_RAW" -eq 0 ]; then
  echo -e "${BLUE}${BOLD}Preparation:${RESET} Copying script to $TMP_SCRIPT_PATH..."
  mkdir -p "$TMP_SCRIPT_DIR"
  cp "$SCRIPT_PATH" "$TMP_SCRIPT_PATH"
  chmod +x "$TMP_SCRIPT_PATH"

  # Clean on exit
  trap 'rm -f "$TMP_SCRIPT_PATH"' EXIT
  echo -e "${GREEN}✔ Script copied locally.${RESET}"
else
  echo -e "${YELLOW}⚠ RAW execution detected. Skipping temp copy.${RESET}"
fi

# --------------------------
# Step 1 – Update system
# --------------------------
echo -e "${BLUE}${BOLD}Step 1/4:${RESET} Updating system..."
apt update && apt upgrade -y
if [ $? -eq 0 ]; then
  echo -e "${GREEN}✔ System updated successfully.${RESET}"
else
  echo -e "${RED}✖ System update failed.${RESET}"
  exit 1
fi
echo

# --------------------------
# Step 2 – Install essentials
# --------------------------
echo -e "${BLUE}${BOLD}Step 2/4:${RESET} Installing packages (tree, ufw, git, curl, wget)..."
apt install -y tree ufw git curl wget
if [ $? -eq 0 ]; then
  echo -e "${GREEN}✔ Packages installed.${RESET}"
else
  echo -e "${RED}✖ Package installation failed.${RESET}"
  exit 1
fi
echo

# --------------------------
# Step 3 – Configure UFW
# --------------------------
echo -e "${BLUE}${BOLD}Step 3/4:${RESET} Enabling UFW and allowing SSH..."
ufw allow OpenSSH
ufw --force enable
if [ $? -eq 0 ]; then
  echo -e "${GREEN}✔ UFW enabled and SSH allowed.${RESET}"
else
  echo -e "${RED}✖ UFW configuration failed.${RESET}"
  exit 1
fi
echo

# --------------------------
# Step 4 – Secure /var/backups
# --------------------------
echo -e "${BLUE}${BOLD}Step 4/4:${RESET} Setting permissions for /var/backups..."
mkdir -p /var/backups
chown -R root:root /var/backups
chmod -R 700 /var/backups
if [ $? -eq 0 ]; then
  echo -e "${GREEN}✔ /var/backups secured.${RESET}"
else
  echo -e "${RED}✖ Failed to secure /var/backups.${RESET}"
  exit 1
fi
echo

# --------------------------
# Step 5 – Préparer dossier de travail Git partagé
# --------------------------
echo -e "${BLUE}${BOLD}Step 4/4:${RESET} Preparing shared Git working directory..."

# 1. Créer le dossier
mkdir -p /var/backups/github

# 2. Créer groupe 'gitusers' s’il n'existe pas
if ! getent group gitusers >/dev/null; then
  groupadd gitusers
  echo -e "${GREEN}✔ Group 'gitusers' created.${RESET}"
else
  echo -e "${YELLOW}⚠ Group 'gitusers' already exists.${RESET}"
fi

# 3. Ajouter tous les utilisateurs non-root au groupe gitusers
for user in $(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd); do
  usermod -a -G gitusers "$user"
  echo -e "${CYAN}→ Added user '$user' to group 'gitusers'${RESET}"
done

# 4. Appliquer les droits au dossier
chown -R root:gitusers /var/backups/github
chmod -R 770 /var/backups/github
chmod g+s /var/backups/github  # Setgid pour hériter du groupe

echo -e "${GREEN}✔ /var/backups/github is ready for shared Git work.${RESET}"

# --------------------------
# Done
# --------------------------
echo -e "${MAGENTA}${BOLD}############################################################${RESET}"
echo -e "${MAGENTA}${BOLD}#   ✅ Setup Complete. Everything is configured.         #${RESET}"
echo -e "${MAGENTA}${BOLD}############################################################${RESET}"
