#!/usr/bin/env bash
# file: /usr/local/bin/neomnia-next-install.sh
# purpose: Créer un projet Next.js sous /opt/<project>, mettre à jour Node (nvm) et Next/React,
#          et ACCORDER des droits RÉCURSIFS sur /opt au user + au groupe du projet (ACL).
# NOTE: ce script NE crée PAS de projet "neosaas-dev" tout seul. Tu choisis le nom.

set -euo pipefail

# ------------------ Log & ui ------------------
LOG_TAG="[ NEOMNIA ]"
banner() { local t="${1:-NEOMNIA ACSS}"; echo "${LOG_TAG} ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓"; printf "%s ┃ %-44s ┃\n" "${LOG_TAG}" "${t}"; echo "${LOG_TAG} ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛"; }
log() { printf "%s %s\n" "${LOG_TAG}" "$*"; }
run_cmd() {
  log "→ $*"
  set +e
  env -u PREFIX -u NPM_CONFIG_PREFIX bash -lc "$*" 2>&1 | while IFS= read -r l; do printf "%s %s\n" "${LOG_TAG}" "$l"; done
  local s=${PIPESTATUS[0]}
  set -e
  return $s
}
human_size(){ local b=${1:-0}; if (( b < 1024 )); then printf "%dB\n" "$b"; elif (( b < 1024*1024 )); then printf "%dKB\n" "$(( (b + 512)/1024 ))"; else local ten=$(( (10*b + 524288) / 1048576 )); printf "%d.%dMB\n" "$((ten/10))" "$((ten%10))"; fi; }
fmt_time(){ local s=${1:-0}; printf "%02d:%02d" "$((s/60))" "$((s%60))"; }

# ------------------ Spinner ------------------
run_with_spinner(){
  local label="$1"; shift
  local cmd="$1"; shift
  local logfile="$1"
  :>"${logfile}"

  log "→ ${label} (log: ${logfile})"
  set +e
  ( env -u PREFIX -u NPM_CONFIG_PREFIX bash -lc "${cmd}" ) \
    > >(tee -a "${logfile}") \
    2> >(tee -a "${logfile}" >&2) &
  local pid=$!
  set -e

  local start; start="$(date +%s)"
  local frames=( "⠋" "⠙" "⠹" "⠸" "⠼" "⠴" "⠦" "⠧" "⠇" "⠏" ); local i=0
  while kill -0 "${pid}" >/dev/null 2>&1; do
    sleep 2
    set +u
    local now elapsed bytes last
    now="$(date +%s)"; elapsed=$(( now - start ))
    if bytes="$(stat -c%s "${logfile}" 2>/dev/null)"; then :; elif bytes="$(stat -f%z "${logfile}" 2>/dev/null)"; then :; else bytes="0"; fi
    last="$(tail -n 1 "${logfile}" 2>/dev/null | sed -E 's/[[:cntrl:]]//g')"
    set -u
    printf "%s %s %s | t=%s | log=%s | last: %s\n" "${LOG_TAG}" "${frames[$i]}" "${label}" "$(fmt_time "${elapsed}")" "$(human_size "${bytes}")" "${last:-…}"
    i=$(( (i+1) % ${#frames[@]} ))
  done

  wait "${pid}"; local status=$?
  if [[ $status -ne 0 ]]; then
    banner "DIAGNOSTIC • ${label} FAILED"
    log "Dernières lignes (${logfile}):"
    tail -n 80 "${logfile}" | while IFS= read -r l; do printf "%s %s\n" "${LOG_TAG}" "$l"; done
    return $status
  else
    log "✅ ${label} terminé"
  fi
}

on_error(){ banner "ÉCHEC • NEOMNIA ACSS"; log "Une erreur est survenue. Voir les logs ci-dessus."; }
trap on_error ERR

# ------------------ Préparation ------------------
unset PREFIX NPM_CONFIG_PREFIX 2>/dev/null || true
export -n PREFIX NPM_CONFIG_PREFIX 2>/dev/null || true
banner "INSTALLATEUR • NEOMNIA ACSS"

# root/sudo requis pour toucher /opt de façon récursive
if [[ $EUID -ne 0 ]]; then
  if command -v sudo >/dev/null 2>&1; then SUDO="sudo"; else log "Ce script doit pouvoir écrire sur /opt. Exécute en root ou installe sudo."; exit 1; fi
else
  SUDO=""
fi

# --- Choix du projet (aucun nom par défaut imposé) ---
read -rp "${LOG_TAG} Nom du projet (ex: mon-app): " RAW_NAME
[[ -z "${RAW_NAME// }" ]] && { log "Nom de projet vide."; exit 1; }
PROJECT_NAME="$(echo "$RAW_NAME" | tr '[:upper:]' '[:lower:]' | sed -E 's/[[:space:]]+/-/g; s/[^a-z0-9-]//g; s/-+/-/g; s/^-|-$//g')"
[[ -z "$PROJECT_NAME" ]] && { log "Nom de projet invalide."; exit 1; }

PROJECT_DIR="/opt/${PROJECT_NAME}"
GROUP_NAME="${PROJECT_NAME}"

# --- Détermination de l’utilisateur cible ---
CANDIDATES=()
[[ -n "${SUDO_USER-}" ]] && CANDIDATES+=("${SUDO_USER}")
LOGNAME_CMD="$(logname 2>/dev/null || true)"; [[ -n "$LOGNAME_CMD" ]] && CANDIDATES+=("$LOGNAME_CMD")
CANDIDATES+=("$(id -un)")
TARGET_USER=""
for u in "${CANDIDATES[@]}"; do if [[ -n "$u" ]] && id "$u" >/dev/null 2>&1; then TARGET_USER="$u"; break; fi; done
[[ -z "$TARGET_USER" ]] && { log "Utilisateur cible introuvable."; exit 1; }

# --- Helpers ---
ver_ge(){ printf '%s\n%s\n' "$1" "$2" | sort -V | head -n1 | grep -qx "$2"; }

ensure_acl(){
  if command -v setfacl >/dev/null 2>&1; then return 0; fi
  banner "INSTALL • acl (setfacl)"
  if command -v apt-get >/dev/null 2>&1; then run_cmd "${SUDO} apt-get update -y"; run_cmd "${SUDO} DEBIAN_FRONTEND=noninteractive apt-get install -y acl"
  elif command -v dnf >/dev/null 2>&1; then run_cmd "${SUDO} dnf install -y acl"
  elif command -v yum >/dev/null 2>&1; then run_cmd "${SUDO} yum install -y acl"
  elif command -v zypper >/dev/null 2>&1; then run_cmd "${SUDO} zypper install -y acl"
  elif command -v pacman >/dev/null 2>&1; then run_cmd "${SUDO} pacman -Sy --noconfirm acl"
  else log "Gestionnaire inconnu → 'acl' non installé automatiquement."; fi
}

# --- NVM/Node ---
ensure_nvm(){
  unset PREFIX NPM_CONFIG_PREFIX || true
  local nvm_sh="${NVM_DIR:-$HOME/.nvm}/nvm.sh"
  if [[ -s "$nvm_sh" ]]; then . "$nvm_sh"
  elif command -v nvm >/dev/null 2>&1; then :
  else run_cmd "curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash"; . "${NVM_DIR:-$HOME/.nvm}/nvm.sh"; fi
}
run_nvm_cmd(){ local cmd="$*"; log "→ (nvm) $cmd"; set +e; unset PREFIX NPM_CONFIG_PREFIX || true; eval "$cmd" 2>&1 | while IFS= read -r l; do printf "%s %s\n" "${LOG_TAG}" "$l"; done; local s=${PIPESTATUS[0]}; set -e; return $s; }

# ------------------ Menu Node (MAJ demandée) ------------------
banner "NODE • Sélection de version"
echo "${LOG_TAG} 1) 24 LTS (prod recommandé)"
echo "${LOG_TAG} 2) 25 Current (tests/dev)"
echo "${LOG_TAG} 3) Custom (ex: 22.21.0)"
echo "${LOG_TAG} 4) Skip (garder Node actuel, ≥ 20.9)"
read -rp "${LOG_TAG} Votre choix [1]: " NODE_MENU; NODE_MENU="${NODE_MENU:-1}"
NODE_SELECTED=""
case "$NODE_MENU" in
  1) NODE_SELECTED="24";;
  2) NODE_SELECTED="25";;
  3) read -rp "${LOG_TAG} Version exacte (ex: 22.21.0): " NODE_SELECTED; [[ -z "${NODE_SELECTED// }" ]] && { log "Version vide."; exit 1; };;
  4) NODE_SELECTED="SKIP";;
  *) log "Choix invalide."; exit 1;;
esac

if [[ "$NODE_SELECTED" == "SKIP" ]]; then
  command -v node >/dev/null 2>&1 || { log "Node absent; impossible de Skip."; exit 1; }
  NODE_VER="$(node -v | sed 's/^v//')"; ver_ge "$NODE_VER" "20.9.0" || { log "Node ${NODE_VER} < 20.9."; exit 1; }
  log "Node actif (skip): v${NODE_VER}"
else
  ensure_nvm
  run_nvm_cmd "nvm install '${NODE_SELECTED}'"
  run_nvm_cmd "nvm alias default '${NODE_SELECTED}'"
  . "${NVM_DIR:-$HOME/.nvm}/nvm.sh"
  unset PREFIX NPM_CONFIG_PREFIX || true
  nvm use --silent default >/dev/null
  NODE_VER="$(node -v | sed 's/^v//')"
  log "Node actif: v${NODE_VER}"
fi
command -v npx >/dev/null 2>&1 || { log "npx introuvable (npm)."; exit 1; }

# ------------------ Menu STRUCTURE ------------------
banner "STRUCTURE • Choix & explications"
echo "${LOG_TAG} A) App Router (moderne) — app/, server components, layouts (recommandé)"
echo "${LOG_TAG} B) Pages Router (legacy) — pages/, API routes classiques"
read -rp "${LOG_TAG} Router: A=App (défaut) / B=Pages [A]: " ROUTER_CHOICE; ROUTER_CHOICE="${ROUTER_CHOICE:-A}"
read -rp "${LOG_TAG} Tailwind ? y/N [y]: " TAILWIND_CHOICE; TAILWIND_CHOICE="${TAILWIND_CHOICE:-y}"
read -rp "${LOG_TAG} Utiliser src/ ? y/N [N]: " SRC_CHOICE; SRC_CHOICE="${SRC_CHOICE:-N}"

CNA_FLAGS=( "--ts" "--eslint" "--turbopack" "--use-npm" "--import-alias" "@/*" )
if [[ "${ROUTER_CHOICE^^}" == "A" ]]; then CNA_FLAGS+=( "--app" ); else CNA_FLAGS+=( "--pages" ); fi
if [[ "${TAILWIND_CHOICE^^}" == "Y" ]]; then CNA_FLAGS+=( "--tailwind" ); fi
if [[ "${SRC_CHOICE^^}" == "Y" ]]; then CNA_FLAGS+=( "--src-dir" ); else CNA_FLAGS+=( "--no-src-dir" ); fi

# ------------------ OUTILS (optionnel) ------------------
banner "OUTILS • (optionnel) multi-sélection ex: 1,2,6"
echo "${LOG_TAG} 1) Prettier | 2) Husky+lint-staged | 3) Vitest | 4) Playwright | 5) Prisma+SQLite | 6) Dockerfile | 7) shadcn/ui"
read -rp "${LOG_TAG} Vos choix [vide = aucun]: " TOOLS_SEL; TOOLS_SEL="${TOOLS_SEL// /}"
select_tool(){ [[ ",${TOOLS_SEL}," == *",$1,"* ]]; }

# ------------------ Groupe projet ------------------
banner "PRÉPARATION • ${PROJECT_NAME}"
if getent group "${GROUP_NAME}" >/dev/null 2>&1; then log "Groupe '${GROUP_NAME}' déjà existant."; else run_cmd "${SUDO} groupadd '${GROUP_NAME}'"; fi
if id -nG "$TARGET_USER" | tr ' ' '\n' | grep -qx "${GROUP_NAME}"; then
  log "Utilisateur '${TARGET_USER}' déjà dans '${GROUP_NAME}'."
else
  run_cmd "${SUDO} usermod -aG '${GROUP_NAME}' '${TARGET_USER}'"
  log "Utilisateur '${TARGET_USER}' ajouté (⚠ newgrp/relog)."
fi
[[ -e "${PROJECT_DIR}" ]] && { log "Le chemin ${PROJECT_DIR} existe déjà. Abandon."; exit 1; }

# ------------------ Staging dir ------------------
pick_staging_dir(){
  local sfx; sfx="$(LC_ALL=C tr -dc 'a-z0-9' </dev/urandom | head -c 6 || true)"
  [[ -z "$sfx" ]] && sfx="000000"
  echo "/tmp/neomnia-${PROJECT_NAME}-${sfx}"
}
STAGE_DIR="$(pick_staging_dir)"

# ------------------ Préflight create-next-app ------------------
banner "PRÉFLIGHT • create-next-app"
SCAFF_LOG="/tmp/.neomnia_cna_${PROJECT_NAME}.log"
run_cmd "node -v"; run_cmd "npm -v"; run_cmd "which npx || command -v npx"
run_with_spinner "Préflight create-next-app@latest --version" "CI=1 npx --yes create-next-app@latest --version" "${SCAFF_LOG}"

# ------------------ Scaffold (non-interactif) ------------------
banner "CRÉATION • Next.js scaffold (staging)"
run_cmd "mkdir -p '${STAGE_DIR}'"; log "Dossier staging : ${STAGE_DIR}"
CNA_CMD="CI=1 npx --yes create-next-app@latest '${STAGE_DIR}' ${CNA_FLAGS[*]} --no-git"
run_with_spinner "Installation des dépendances (create-next-app)" "${CNA_CMD}" "${SCAFF_LOG}"

# (outils optionnels) — (à compléter au besoin)
# if select_tool 1; then :; fi

# ------------------ Déploiement dans /opt/<projet> ------------------
banner "DÉPLOIEMENT • /opt/${PROJECT_NAME}"
run_cmd "${SUDO} mv '${STAGE_DIR}' '${PROJECT_DIR}'"
run_cmd "${SUDO} chown -R root:'${GROUP_NAME}' '${PROJECT_DIR}'"
run_cmd "${SUDO} chmod 2775 '${PROJECT_DIR}'"
run_cmd "${SUDO} chmod -R g+rwX '${PROJECT_DIR}'"
run_cmd "${SUDO} find '${PROJECT_DIR}' -type d -exec chmod g+s {} +"

# ------------------ ACL: DROITS RÉCURSIFS SUR /opt (⚠ global) ------------------
banner "DROITS • ACL récursives sur /opt"
ensure_acl
if command -v setfacl >/dev/null 2>&1; then
  log "→ Accorder rwX à l'utilisateur '${TARGET_USER}' et au groupe '${GROUP_NAME}' sur /opt (récursif + défauts)"
  run_cmd "${SUDO} setfacl -R -m u:${TARGET_USER}:rwX,g:${GROUP_NAME}:rwX /opt"
  run_cmd "${SUDO} setfacl -dR -m u:${TARGET_USER}:rwX,g:${GROUP_NAME}:rwX /opt"
else
  log "ACL indisponibles. FallBack chmod sur ${PROJECT_DIR} uniquement."
  run_cmd "${SUDO} chmod -R g+rwX '${PROJECT_DIR}'"
fi

# --- Épingle la version Node choisie dans le projet ---
if [[ "${NODE_SELECTED}" != "SKIP" ]]; then printf '%s\n' "${NODE_VER}" | ${SUDO} tee "${PROJECT_DIR}/.nvmrc" >/dev/null; fi

# ------------------ MAJ Next/React (dans le projet) ------------------
banner "MÀJ • Next & React"
run_cmd "${SUDO} bash -lc 'cd \"${PROJECT_DIR}\" && npm pkg set \"engines.node=>=22 <26\"'"
run_cmd "${SUDO} bash -lc 'cd \"${PROJECT_DIR}\" && npm i -E next@latest react@latest react-dom@latest'"

# ------------------ Lancement DEV (port libre 3000-3999) ------------------
find_free_port(){
  local p=3000
  while (( p < 4000 )); do
    if command -v ss >/dev/null 2>&1; then
      ss -ltn "( sport = :$p )" | awk 'NR>1{print; exit}' | grep -q . || { echo "$p"; return 0; }
    elif command -v lsof >/dev/null 2>&1; then
      lsof -i TCP:"$p" -sTCP:LISTEN >/dev/null 2>&1 || { echo "$p"; return 0; }
    else
      (echo > /dev/tcp/127.0.0.1/"$p") >/dev/null 2>&1 && busy=1 || busy=0
      [[ $busy -eq 0 ]] && { echo "$p"; return 0; }
    fi
    p=$((p+1))
  done
  return 1
}

start_dev_server(){
  local dir="$1"; local user="$2"; local port="$3"
  banner "LANCEMENT • Next dev (port ${port})"
  local devlog="${dir}/dev.log"
  local cmd="cd '${dir}' && NODE_ENV=development nohup npm run dev -- -p ${port} >> '${devlog}' 2>&1 & echo \$!"
  local pid
  if [[ -n "$user" ]]; then pid="$(${SUDO} -u "${user}" bash -lc "${cmd}")"; else pid="$(bash -lc "${cmd}")"; fi
  log "Dev lancé (PID=${pid}), log: ${devlog}"
  local start; start="$(date +%s)"
  while true; do
    sleep 2
    if grep -qiE "ready - started server on .*:${port}|Local:.*:${port}" "${devlog}" 2>/dev/null; then
      log "✅ Next prêt sur http://localhost:${port}"
      break
    fi
    if (( $(date +%s) - start > 60 )); then
      log "⏳ Next pas encore prêt (60s). Voir ${devlog}."
      break
    fi
    local last; last="$(tail -n 1 "${devlog}" 2>/dev/null | sed -E 's/[[:cntrl:]]//g')"
    printf "%s ⏳ Next dev | port=%s | last: %s\n" "${LOG_TAG}" "${port}" "${last:-…}"
  done
  if command -v curl >/dev/null 2>&1; then
    if curl -fsS "http://127.0.0.1:${port}" >/dev/null 2>&1; then
      log "HTTP OK sur http://127.0.0.1:${port}"
    else
      log "HTTP pas encore OK; consultez ${devlog}."
    fi
  fi
  log "Pour arrêter: kill ${pid}  (ou: npx kill-port ${port})"
}

read -rp "${LOG_TAG} Lancer le serveur de développement maintenant ? y/N [y]: " RUN_DEV; RUN_DEV="${RUN_DEV:-y}"
if [[ "${RUN_DEV^^}" == "Y" ]]; then
  PORT="$(find_free_port || true)"
  if [[ -z "${PORT:-}" ]]; then
    log "Aucun port libre trouvé entre 3000 et 3999."
  else
    start_dev_server "${PROJECT_DIR}" "${TARGET_USER:-}" "${PORT}"
  fi
fi

# ------------------ Vérification écriture ------------------
banner "VÉRIF DROITS • Écriture utilisateur"
if run_cmd "${SUDO} -u '${TARGET_USER}' bash -lc \"echo ok > '${PROJECT_DIR}/.neomnia_write_test' && rm -f '${PROJECT_DIR}/.neomnia_write_test'\""; then
  log "✅ L'utilisateur '${TARGET_USER}' peut écrire dans ${PROJECT_DIR}."
else
  log "❌ L'utilisateur '${TARGET_USER}' ne peut pas écrire MAINTENANT. Actions: 'newgrp ${GROUP_NAME}' ou reconnexion."
fi

# ------------------ Récap ------------------
banner "RÉCAP • NEOMNIA ACSS"
log "Projet      : ${PROJECT_NAME}"
log "Dossier     : ${PROJECT_DIR}"
log "Groupe      : ${GROUP_NAME}"
log "Utilisateur : ${TARGET_USER}"
log "Node        : v${NODE_VER:-$(node -v 2>/dev/null || echo '?')}"
log "Dev         : cd '${PROJECT_DIR}' && npm run dev"
log "Build/Start : cd '${PROJECT_DIR}' && npm run build && npm run start -- -p 3000"
log "ACL /opt    : u:${TARGET_USER} rwX, g:${GROUP_NAME} rwX (récursif + défauts)"
banner "TERMINÉ • NEOMNIA ACSS"
exit 0
