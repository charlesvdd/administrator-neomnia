#!/usr/bin/env bash
# file: neomnia-next-install.sh  (v2)
# purpose:
#  - Mettre à niveau Next/React dans un projet EXISTANT, avec Node via nvm (24 LTS / 25 Current / Custom / Skip)
#  - OU créer un NOUVEAU projet Next.js (sans nom imposé, sans git), dans un dossier inscriptible
#  - Sans ACL/groupe ni écriture obligatoire dans /opt
set -euo pipefail

LOG_TAG="[ NEOMNIA ]"
banner(){ local t="${1:-NEOMNIA}"; echo -e "${LOG_TAG} ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n${LOG_TAG} ┃ ${t}\n${LOG_TAG} ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛"; }
log(){ printf "%s %s\n" "${LOG_TAG}" "$*"; }
err(){ printf "%s ❌ %s\n" "${LOG_TAG}" "$*" >&2; }

# -- utils --
run(){
  local cmd="$*"
  log "→ $cmd"
  set +e
  bash -lc "$cmd"
  local s=$?
  set -e
  return $s
}

find_writable_base(){
  local cands=( "/opt" "$HOME/apps" "$HOME/Projects" "$HOME" )
  for d in "${cands[@]}"; do
    mkdir -p "$d" 2>/dev/null || true
    if [ -w "$d" ]; then echo "$d"; return 0; fi
  done
  echo "$HOME"
}

# -- nvm handling --
ensure_nvm(){
  if command -v nvm >/dev/null 2>&1; then return 0; fi
  local nvm_sh="${NVM_DIR:-$HOME/.nvm}/nvm.sh"
  if [ -s "$nvm_sh" ]; then . "$nvm_sh"; return 0; fi
  log "Installation de nvm…"
  bash -lc 'curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash'
  . "${NVM_DIR:-$HOME/.nvm}/nvm.sh"
}

use_node_version(){
  local choice="$1"
  ensure_nvm
  case "$choice" in
    LTS) nvm install 24 && nvm alias default 24 && nvm use 24 >/dev/null ;;
    CURRENT) nvm install 25 && nvm alias default 25 && nvm use 25 >/dev/null ;;
    SKIP) : ;; # nothing
    *) nvm install "$choice" && nvm alias default "$choice" && nvm use "$choice" >/dev/null ;;
  esac
  log "Node actif: $(node -v 2>/dev/null || echo 'absent')"
  command -v npx >/dev/null 2>&1 || { err "npx introuvable"; exit 1; }
}

# -- menu node --
pick_node(){
  banner "NODE • Sélection version"
  echo "${LOG_TAG} 1) 24 LTS (recommandé prod)"
  echo "${LOG_TAG} 2) 25 Current (tests/dev)"
  echo "${LOG_TAG} 3) Custom (ex: 22.21.0)"
  echo "${LOG_TAG} 4) Skip (garder Node courant)"
  read -rp "${LOG_TAG} Choix [1]: " ch; ch="${ch:-1}"
  case "$ch" in
    1) echo "LTS";;
    2) echo "CURRENT";;
    3) read -rp "${LOG_TAG} Version exacte: " v; [[ -z "${v// }" ]] && { err "Version vide."; exit 1; }; echo "$v";;
    4) echo "SKIP";;
    *) echo "LTS";;
  esac
}

# -- mode --
pick_mode(){
  banner "MODE • Que veux-tu faire ?"
  echo "${LOG_TAG} 1) Mettre à niveau un projet existant (Next/React + .nvmrc)"
  echo "${LOG_TAG} 2) Créer un nouveau projet Next.js"
  read -rp "${LOG_TAG} Choix [1]: " m; m="${m:-1}"
  case "$m" in
    1) echo "UPGRADE";;
    2) echo "CREATE";;
    *) echo "UPGRADE";;
  esac
}

# -- upgrade existing project --
upgrade_project(){
  local dir="$1" node_choice="$2"
  [ -d "$dir" ] || { err "Répertoire inexistant: $dir"; exit 1; }
  [ -f "$dir/package.json" ] || { err "package.json introuvable dans $dir"; exit 1; }

  banner "UPGRADE • $(basename "$dir")"
  ( cd "$dir"
    # Node
    if [ "$node_choice" != "SKIP" ]; then
      use_node_version "$node_choice"
      node -v | sed 's/^v//' | awk -F. '{ if ($1<22) { exit 1 } }' || { err "Node doit être ≥ 22"; exit 1; }
      # épingle la version choisie dans .nvmrc
      case "$node_choice" in
        LTS) echo "24" > .nvmrc ;;
        CURRENT) echo "25" > .nvmrc ;;
        *) echo "$node_choice" > .nvmrc ;;
      esac
    else
      command -v node >/dev/null || { err "Node absent en mode Skip"; exit 1; }
      log "Skip Node: $(node -v)"
    fi

    # MàJ Next/React (versions stables)
    log "Mise à jour Next/React…"
    run "npm pkg set 'engines.node=>=22 <26'" || true
    run "npm i -E next@latest react@latest react-dom@latest"

    # Vérifs
    run "npx --yes next --version"
    run "node -e \"console.log('react', require('react').version);console.log('react-dom', require('react-dom').version)\""

    # Build rapide (optionnel)
    read -rp "${LOG_TAG} Lancer un build rapide maintenant ? y/N [N]: " b; b="${b:-N}"
    if [[ "${b^^}" == "Y" ]]; then
      run "npx next build"
    fi

    # Dev server (optionnel)
    read -rp "${LOG_TAG} Lancer 'npm run dev' sur un port libre ? y/N [N]: " d; d="${d:-N}"
    if [[ "${d^^}" == "Y" ]]; then
      local p=3000
      while ss -ltn "( sport = :$p )" 2>/dev/null | awk 'NR>1{print;exit 0} END{exit 1}'; do p=$((p+1)); [ $p -lt 4000 ] || { err "Pas de port libre 3000-3999"; break; }; done
      log "Démarrage dev sur :$p"
      nohup npm run dev -- -p "$p" >/dev/null 2>&1 &
      sleep 2
      log "→ http://localhost:${p}"
    fi
  )
}

# -- create new project --
create_project(){
  local node_choice="$1"

  # Node
  use_node_version "$node_choice"

  # Paramètres projet
  read -rp "${LOG_TAG} Nom du projet (ex: mon-app): " raw
  [[ -z "${raw// }" ]] && { err "Nom vide."; exit 1; }
  local name
  name="$(echo "$raw" | tr '[:upper:]' '[:lower:]' | sed -E 's/[[:space:]]+/-/g; s/[^a-z0-9-]//g; s/-+/-/g; s/^-|-$//g')"
  [[ -z "$name" ]] && { err "Nom invalide."; exit 1; }

  local base; base="$(find_writable_base)"
  local dest="$base/$name"
  if [ -e "$dest" ]; then err "Le dossier existe déjà: $dest"; exit 1; fi

  banner "CRÉATION • $name"
  log "Dossier cible: $dest"
  read -rp "${LOG_TAG} Router App (A) ou Pages (P) ? [A]: " r; r="${r:-A}"
  read -rp "${LOG_TAG} Tailwind ? y/N [y]: " tw; tw="${tw:-y}"
  read -rp "${LOG_TAG} Utiliser src/ ? y/N [N]: " sdir; sdir="${sdir:-N}"

  local flags=( "--ts" "--eslint" "--turbopack" "--use-npm" "--import-alias" "@/*" "--no-git" )
  [[ "${r^^}" == "A" ]] && flags+=( "--app" ) || flags+=( "--pages" )
  [[ "${tw^^}" == "Y" ]] && flags+=( "--tailwind" )
  [[ "${sdir^^}" == "Y" ]] && flags+=( "--src-dir" ) || flags+=( "--no-src-dir" )

  # Scaffold dans un staging
  local stage
  stage="$(mktemp -d "/tmp/neomnia-${name}-XXXXXX")"
  run "CI=1 npx --yes create-next-app@latest '${stage}' ${flags[*]}"

  # Déplacement
  run "mv '${stage}' '${dest}'"
  ( cd "$dest"
    # épingle Node
    case "$node_choice" in
      LTS) echo "24" > .nvmrc ;;
      CURRENT) echo "25" > .nvmrc ;;
      SKIP) node -v | sed 's/^v//' > .nvmrc ;;
      *) echo "$node_choice" > .nvmrc ;;
    esac
    run "npm pkg set 'engines.node=>=22 <26'" || true

    # Vérif Next/React
    run "npx --yes next --version"
    run "node -e \"console.log('react', require('react').version);console.log('react-dom', require('react-dom').version)\""

    # Lancer dev ?
    read -rp "${LOG_TAG} Lancer 'npm run dev' maintenant ? y/N [y]: " dev; dev="${dev:-y}"
    if [[ "${dev^^}" == "Y" ]]; then
      local p=3000
      while ss -ltn "( sport = :$p )" 2>/dev/null | awk 'NR>1{print;exit 0} END{exit 1}'; do p=$((p+1)); [ $p -lt 4000 ] || { err "Pas de port libre 3000-3999"; break; }; done
      log "Démarrage dev sur :$p"
      nohup npm run dev -- -p "$p" >/dev/null 2>&1 &
      sleep 2
      log "→ http://localhost:${p}"
    fi
    log "Projet créé: $dest"
  )
}

# ------------------ MAIN ------------------
banner "INSTALLATEUR • NEOMNIA Next.js (v2)"

# Choix mode et Node
MODE="$(pick_mode)"
NODE_CHOICE="$(pick_node)"
if [ "$NODE_CHOICE" = "SKIP" ]; then
  command -v node >/dev/null || { err "Node absent en mode Skip"; exit 1; }
  ver="$(node -v | sed 's/^v//')"
  log "Skip Node, courant: v${ver}"
fi

if [ "$MODE" = "UPGRADE" ]; then
  read -rp "${LOG_TAG} Chemin du projet existant (ex: /opt/neosaasbd ou ~/apps/mon-app): " PDIR
  [[ -z "${PDIR// }" ]] && { err "Chemin vide."; exit 1; }
  upgrade_project "$PDIR" "$NODE_CHOICE"
else
  create_project "$NODE_CHOICE"
fi

banner "TERMINÉ • NEOMNIA"
exit 0
