#!/usr/bin/env bash
# file: /usr/local/bin/neomnia-next-install.sh
# purpose: Installer Next.js sous /opt/<project> avec menu Node/Next (nvm),
#          groupe=<project> + ajout user, scaffold en staging (/tmp ou $HOME/.cache),
#          droits setgid + ACL (groupe & user, auto-installe 'acl'), logs détaillés.

set -euo pipefail

# ------------------ Log helpers ------------------
LOG_TAG="[ NEOMNIA ]"
banner() {
  local title="${1:-NEOMNIA ACSS}"
  echo "${LOG_TAG} ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓"
  printf "%s ┃ %-44s ┃\n" "${LOG_TAG}" "${title}"
  echo "${LOG_TAG} ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛"
}
log() { printf "%s %s\n" "${LOG_TAG}" "$*"; }

# Sous-process sans PREFIX/NPM_CONFIG_PREFIX (compat nvm/npm)
run_cmd() {
  log "→ $*"
  set +e
  env -u PREFIX -u NPM_CONFIG_PREFIX bash -lc "$*" 2>&1 | while IFS= read -r l; do printf "%s %s\n" "${LOG_TAG}" "$l"; done
  local s=${PIPESTATUS[0]}
  set -e
  return $s
}

on_error() { banner "ÉCHEC • NEOMNIA ACSS"; log "Une erreur est survenue. Voir les logs ci-dessus."; }
trap on_error ERR

# Purge immédiate (compat nvm)
unset PREFIX NPM_CONFIG_PREFIX 2>/dev/null || true
export -n PREFIX NPM_CONFIG_PREFIX 2>/dev/null || true

banner "INSTALLATEUR • NEOMNIA ACSS"

# ------------------ Root/Sudo ------------------
if [[ $EUID -ne 0 ]]; then
  if command -v sudo >/dev/null 2>&1; then SUDO="sudo"; else log "Exécutez en root ou installez sudo."; exit 1; fi
else
  SUDO=""
fi

# ------------------ Project ------------------
read -rp "${LOG_TAG} Nom du projet (ex: mon-app): " RAW_NAME
[[ -z "${RAW_NAME// }" ]] && { log "Nom de projet vide."; exit 1; }
PROJECT_NAME="$(echo "$RAW_NAME" | tr '[:upper:]' '[:lower:]' | sed -E 's/[[:space:]]+/-/g; s/[^a-z0-9-]//g; s/-+/-/g; s/^-|-$//g')"
[[ -z "$PROJECT_NAME" ]] && { log "Nom de projet invalide après normalisation."; exit 1; }
PROJECT_DIR="/opt/${PROJECT_NAME}"
GROUP_NAME="${PROJECT_NAME}"

# ------------------ User cible ------------------
CANDIDATES=()
[[ -n "${SUDO_USER-}" ]] && CANDIDATES+=("${SUDO_USER}")
LOGNAME_CMD="$(logname 2>/dev/null || true)"; [[ -n "$LOGNAME_CMD" ]] && CANDIDATES+=("$LOGNAME_CMD")
CANDIDATES+=("$(id -un)")
TARGET_USER=""
for u in "${CANDIDATES[@]}"; do
  if [[ -n "$u" ]] && id "$u" >/dev/null 2>&1; then TARGET_USER="$u"; break; fi
done

# ------------------ Helpers ------------------
ver_ge() { printf '%s\n%s\n' "$1" "$2" | sort -V | head -n1 | grep -qx "$2"; }

ensure_acl() {
  if command -v setfacl >/dev/null 2>&1; then
    log "ACL OK (setfacl présent)."
    return 0
  fi
  banner "INSTALL • acl (setfacl)"
  if command -v apt-get >/dev/null 2>&1; then
    run_cmd "${SUDO} apt-get update -y"
    run_cmd "${SUDO} DEBIAN_FRONTEND=noninteractive apt-get install -y acl"
  elif command -v dnf >/dev/null 2>&1; then
    run_cmd "${SUDO} dnf install -y acl"
  elif command -v yum >/dev/null 2>&1; then
    run_cmd "${SUDO} yum install -y acl"
  elif command -v zypper >/dev/null 2>&1; then
    run_cmd "${SUDO} zypper install -y acl"
  elif command -v pacman >/dev/null 2>&1; then
    run_cmd "${SUDO} pacman -Sy --noconfirm acl"
  else
    log "Gestionnaire inconnu → 'acl' non installé automatiquement."
  fi
  if command -v setfacl >/dev/null 2>&1; then log "ACL installées."; else log "ACL indisponibles après tentative d’installation."; fi
}

ensure_nvm() {
  unset PREFIX NPM_CONFIG_PREFIX || true
  local nvm_sh
  nvm_sh="${NVM_DIR:-$HOME/.nvm}/nvm.sh"
  if [[ -s "$nvm_sh" ]]; then
    # shellcheck source=/dev/null
    . "$nvm_sh"
  elif command -v nvm >/dev/null 2>&1; then
    :
  else
    log "Installation de nvm…"
    run_cmd "curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash"
    nvm_sh="${NVM_DIR:-$HOME/.nvm}/nvm.sh"
    # shellcheck source=/dev/null
    . "$nvm_sh"
  fi
}
run_nvm_cmd() {
  local cmd="$*"
  log "→ (nvm) $cmd"
  set +e
  unset PREFIX NPM_CONFIG_PREFIX || true
  eval "$cmd" 2>&1 | while IFS= read -r l; do printf "%s %s\n" "${LOG_TAG}" "$l"; done
  local s=${PIPESTATUS[0]}
  set -e
  return $s
}

# ------------------ Node menu ------------------
banner "NODE • Sélection de version"
echo "${LOG_TAG} 1) LTS (auto via nvm)  [recommandé]"
echo "${LOG_TAG} 2) 22.x (courant)"
echo "${LOG_TAG} 3) 20.x (maintenance)"
echo "${LOG_TAG} 4) Custom (ex: 22.10.0)"
echo "${LOG_TAG} 5) Skip (utiliser Node déjà installé, ≥ 20.9)"
read -rp "${LOG_TAG} Votre choix [1]: " NODE_MENU
NODE_MENU="${NODE_MENU:-1}"

NODE_SELECTED=""
case "$NODE_MENU" in
  1) NODE_SELECTED="lts/*" ;;
  2) NODE_SELECTED="22" ;;
  3) NODE_SELECTED="20" ;;
  4) read -rp "${LOG_TAG} Version exacte (ex: 22.10.0): " NODE_SELECTED; [[ -z "${NODE_SELECTED// }" ]] && { log "Version vide."; exit 1; } ;;
  5) NODE_SELECTED="SKIP" ;;
  *) log "Choix invalide."; exit 1 ;;
esac

if [[ "$NODE_SELECTED" == "SKIP" ]]; then
  command -v node >/dev/null 2>&1 || { log "Node absent; impossible de Skip."; exit 1; }
  NODE_VER="$(node -v | sed 's/^v//')"
  ver_ge "$NODE_VER" "20.9.0" || { log "Node ${NODE_VER} < 20.9. Choisissez 1/2/3/4."; exit 1; }
  log "Node actif (skip): v${NODE_VER}"
else
  ensure_nvm
  run_nvm_cmd "nvm install '${NODE_SELECTED}'"
  run_nvm_cmd "nvm alias default '${NODE_SELECTED}'"
  # shellcheck source=/dev/null
  . "${NVM_DIR:-$HOME/.nvm}/nvm.sh"
  unset PREFIX NPM_CONFIG_PREFIX || true
  nvm use --silent default >/dev/null
  NODE_VER="$(node -v | sed 's/^v//')"
  log "Node actif: v${NODE_VER}"
fi

command -v npx >/dev/null 2>&1 || { log "npx introuvable (npm)."; exit 1; }

# ------------------ Next version ------------------
banner "NEXT • Sélection"
echo "${LOG_TAG} 1) latest (défaut)"
echo "${LOG_TAG} 2) Custom (ex: 16.1.3)"
read -rp "${LOG_TAG} Votre choix [1]: " NEXT_MENU
NEXT_MENU="${NEXT_MENU:-1}"
NEXT_CHOICE="latest"
if [[ "$NEXT_MENU" == "2" ]]; then
  read -rp "${LOG_TAG} Version Next (ex: 16.1.3): " NEXT_CHOICE
  [[ -z "${NEXT_CHOICE// }" ]] && { log "Version Next vide."; exit 1; }
fi

# ------------------ Groupe & ajout user ------------------
banner "PRÉPARATION • ${PROJECT_NAME}"
if getent group "${GROUP_NAME}" >/dev/null 2>&1; then
  log "Groupe '${GROUP_NAME}' déjà existant."
else
  run_cmd "${SUDO} groupadd '${GROUP_NAME}'"
fi

if [[ -n "$TARGET_USER" ]]; then
  if id -nG "$TARGET_USER" | tr ' ' '\n' | grep -qx "${GROUP_NAME}"; then
    log "Utilisateur '${TARGET_USER}' déjà membre du groupe '${GROUP_NAME}'."
  else
    run_cmd "${SUDO} usermod -aG '${GROUP_NAME}' '${TARGET_USER}'"
    log "Utilisateur '${TARGET_USER}' ajouté au groupe '${GROUP_NAME}' (⚠️ déconnexion/reconnexion ou 'newgrp ${GROUP_NAME}')."
  fi
else
  log "Aucun utilisateur cible détecté pour ajout au groupe."
fi

[[ -e "${PROJECT_DIR}" ]] && { log "Le chemin ${PROJECT_DIR} existe déjà. Abandon."; exit 1; }

# ------------------ Sélection dossier de staging ------------------
pick_staging_dir() {
  local suffix
  suffix="$(LC_ALL=C tr -dc 'a-z0-9' </dev/urandom | head -c 6 || true)"
  [[ -z "$suffix" ]] && suffix="000000"
  local candidate="/tmp/neomnia-${PROJECT_NAME}-${suffix}"
  if touch "/tmp/.neomnia_w_test" 2>/dev/null; then
    rm -f "/tmp/.neomnia_w_test" || true
    echo "$candidate"
    return 0
  fi
  local home_cache="${HOME}/.cache/neomnia-${PROJECT_NAME}-${suffix}"
  log "⚠️ /tmp non inscriptible; fallback vers ${home_cache}"
  echo "$home_cache"
}
STAGE_DIR="$(pick_staging_dir)"

# ------------------ Préflight create-next-app ------------------
banner "PRÉFLIGHT • create-next-app"
SCAFFOLD_LOG="/tmp/.neomnia_cna_${PROJECT_NAME}.log"
# Afficher versions pour diag
run_cmd "node -v"
run_cmd "npm -v"
run_cmd "which npx || command -v npx"
# Teste la résolvabilité du package avant de lancer le scaffold complet
if ! run_cmd "npx --yes create-next-app@latest --version | tee -a '${SCAFFOLD_LOG}'"; then
  banner "DIAGNOSTIC • npx/create-next-app indisponible"
  log "Causes probables: réseau npm/proxy, DNS, npm down, cache npm corrompu."
  log "Essais manuels possibles:"
  log "  npm config get registry"
  log "  npm ping"
  log "  npx --yes create-next-app@latest --version"
  exit 1
fi

# ------------------ Scaffold en STAGING ------------------
banner "CRÉATION • Next.js scaffold (staging)"
run_cmd "mkdir -p '${STAGE_DIR}'"
log "Dossier staging : ${STAGE_DIR}"

scaffold_next() {
  local cmd="npx --yes create-next-app@latest '${STAGE_DIR}' --ts --app --tailwind --eslint --turbopack --use-npm"
  log "→ create-next-app (log: ${SCAFFOLD_LOG})"
  set +e
  env -u PREFIX -u NPM_CONFIG_PREFIX bash -lc "$cmd" > >(tee -a "${SCAFFOLD_LOG}") 2> >(tee -a "${SCAFFOLD_LOG}" >&2)
  local status=$?
  set -e
  if [[ $status -ne 0 ]]; then
    banner "DIAGNOSTIC • create-next-app FAILED"
    log "Dernières lignes du log (${SCAFFOLD_LOG}):"
    tail -n 80 "${SCAFFOLD_LOG}" | while IFS= read -r l; do printf "%s %s\n" "${LOG_TAG}" "$l"; done
    log "Pistes: réseau/proxy, droits sur '${STAGE_DIR}', version npx, espace disque."
    return $status
  fi
}

if ! scaffold_next; then
  exit 1
fi

# ------------------ Next pin si custom ------------------
if [[ "${NEXT_CHOICE}" != "latest" ]]; then
  banner "PIN • next@${NEXT_CHOICE}"
  run_cmd "cd '${STAGE_DIR}' && npm i -E next@'${NEXT_CHOICE}'"
fi

# ------------------ Move vers /opt puis droits ------------------
banner "DÉPLOIEMENT • /opt/${PROJECT_NAME}"
run_cmd "${SUDO} mv '${STAGE_DIR}' '${PROJECT_DIR}'"
run_cmd "${SUDO} chown -R root:'${GROUP_NAME}' '${PROJECT_DIR}'"
run_cmd "${SUDO} chmod 2775 '${PROJECT_DIR}'"
run_cmd "${SUDO} chmod -R g+rwX '${PROJECT_DIR}'"
run_cmd "${SUDO} find '${PROJECT_DIR}' -type d -exec chmod g+s {} +"

# ACL (groupe + user) — installe si manquant
ensure_acl
if command -v setfacl >/dev/null 2>&1; then
  run_cmd "${SUDO} setfacl -R -m g:${GROUP_NAME}:rwX '${PROJECT_DIR}'"
  run_cmd "${SUDO} setfacl -dR -m g:${GROUP_NAME}:rwX '${PROJECT_DIR}'"
  if [[ -n "${TARGET_USER}" ]]; then
    run_cmd "${SUDO} setfacl -R -m u:${TARGET_USER}:rwX '${PROJECT_DIR}'"
    run_cmd "${SUDO} setfacl -dR -m u:${TARGET_USER}:rwX '${PROJECT_DIR}'"
  fi
else
  log "ACL indisponibles; seuls chmod+setgid sont appliqués."
fi

# .nvmrc si Node non-skip
if [[ "${NODE_SELECTED}" != "SKIP" ]]; then
  printf '%s\n' "${NODE_VER}" | ${SUDO} tee "${PROJECT_DIR}/.nvmrc" >/dev/null
fi

# ------------------ Vérification d'écriture ------------------
banner "VÉRIF DROITS • Écriture utilisateur"
if [[ -n "${TARGET_USER}" ]]; then
  if run_cmd "${SUDO} -u '${TARGET_USER}' bash -lc \"echo ok > '${PROJECT_DIR}/.neomnia_write_test' && rm -f '${PROJECT_DIR}/.neomnia_write_test'\""; then
    log "✅ L'utilisateur '${TARGET_USER}' peut écrire dans ${PROJECT_DIR}."
  else
    log "❌ L'utilisateur '${TARGET_USER}' ne peut pas écrire MAINTENANT."
    log "Actions: exécuter 'newgrp ${GROUP_NAME}' ou se reconnecter."
  fi
else
  log "Vérif sautée: utilisateur cible introuvable."
fi

# ------------------ Récap ------------------
banner "RÉCAP • NEOMNIA ACSS"
log "Projet      : ${PROJECT_NAME}"
log "Dossier     : ${PROJECT_DIR}"
log "Groupe      : ${GROUP_NAME}"
log "Utilisateur : ${TARGET_USER:-N/A} (membre du groupe)"
log "Node        : v${NODE_VER}"
log "Next        : ${NEXT_CHOICE}"
log "Dev         : cd '${PROJECT_DIR}' && npm run dev"
log "Build/Start : cd '${PROJECT_DIR}' && npm run build && npm run start -- -p 3000"
log "⚠️  Si droits non pris en compte: 'newgrp ${GROUP_NAME}' ou reconnexion."

banner "TERMINÉ • NEOMNIA ACSS"
exit 0
