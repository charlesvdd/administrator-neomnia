#!/usr/bin/env bash
# file: /usr/local/bin/neomnia-next-install.sh
# purpose: Installer un projet Next.js sous /opt/<project>, choisir versions Node (via nvm) & Next, config groupe & droits, logs NEOMNIA.

set -euo pipefail

# ------------------ Log helpers ------------------
PREFIX="[ NEOMNIA ]"
banner() {
  local title="${1:-NEOMNIA ACSS}"
  echo "${PREFIX} ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓"
  printf "%s ┃ %-44s ┃\n" "${PREFIX}" "${title}"
  echo "${PREFIX} ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛"
}
log() { printf "%s %s\n" "${PREFIX}" "$*"; }

run_cmd() { # Prefixed live-logging
  log "→ $*"
  set +e
  bash -c "$*" 2>&1 | while IFS= read -r line; do printf "%s %s\n" "${PREFIX}" "${line}"; done
  local status=${PIPESTATUS[0]}
  set -e
  return $status
}

on_error() {
  banner "ÉCHEC • NEOMNIA ACSS"
  log "Une erreur est survenue. Voir les logs ci-dessus."
}
trap on_error ERR

banner "INSTALLATEUR • NEOMNIA ACSS"

# ------------------ Root/Sudo ------------------
if [[ $EUID -ne 0 ]]; then
  if command -v sudo >/dev/null 2>&1; then
    SUDO="sudo"
  else
    log "Exécutez en root ou installez sudo."
    exit 1
  fi
else
  SUDO=""
fi

# ------------------ Read project name ------------------
read -rp "${PREFIX} Nom du projet (ex: mon-app): " RAW_NAME
if [[ -z "${RAW_NAME// }" ]]; then
  log "Nom de projet vide."
  exit 1
fi
PROJECT_NAME="$(echo "$RAW_NAME" | tr '[:upper:]' '[:lower:]' | sed -E 's/[[:space:]]+/-/g; s/[^a-z0-9-]//g; s/-+/-/g; s/^-|-$//g')"
if [[ -z "$PROJECT_NAME" ]]; then
  log "Nom de projet invalide après normalisation."
  exit 1
fi
PROJECT_DIR="/opt/${PROJECT_NAME}"
GROUP_NAME="${PROJECT_NAME}"

banner "PARAMÈTRES • ${PROJECT_NAME}"

# ------------------ Node: select version strategy ------------------
log "Choix version Node:"
log "  - Tapez 'latest-lts' pour installer la dernière LTS via nvm (défaut)"
log "  - Tapez une version précise (ex: 22.10.0)"
log "  - Tapez 'skip' pour utiliser Node déjà présent (doit être ≥ 20.9)"
read -rp "${PREFIX} Version Node [latest-lts]: " NODE_CHOICE
NODE_CHOICE="${NODE_CHOICE:-latest-lts}"

# Install or ensure Node with nvm when needed/desired
ensure_nvm() {
  if ! command -v bash >/dev/null 2>&1; then log "bash manquant"; exit 1; fi
  if [[ -s "${HOME}/.nvm/nvm.sh" ]]; then
    # shellcheck source=/dev/null
    . "${HOME}/.nvm/nvm.sh"
  elif command -v nvm >/dev/null 2>&1; then
    :
  else
    log "Installation de nvm…"
    run_cmd "curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash"
    # shellcheck source=/dev/null
    . "${HOME}/.nvm/nvm.sh"
  fi
}

use_node_with_nvm() {
  local wanted="$1"
  ensure_nvm
  if [[ "$wanted" == "latest-lts" ]]; then
    run_cmd "nvm install --lts"
    run_cmd "nvm alias default 'lts/*'"
    # shellcheck source=/dev/null
    . "${HOME}/.nvm/nvm.sh"
    nvm use --silent default >/dev/null
  else
    run_cmd "nvm install '${wanted}'"
    run_cmd "nvm alias default '${wanted}'"
    # shellcheck source=/dev/null
    . "${HOME}/.nvm/nvm.sh"
    nvm use --silent default >/dev/null
  fi
}

ver_ge() { printf '%s\n%s\n' "$1" "$2" | sort -V | head -n1 | grep -qx "$2"; }

if [[ "$NODE_CHOICE" == "skip" ]]; then
  if ! command -v node >/dev/null 2>&1; then
    log "Node absent. Impossible de 'skip'. Relancez et choisissez une installation."
    exit 1
  fi
  NODE_VER="$(node -v | sed 's/^v//')"
  if ! ver_ge "$NODE_VER" "20.9.0"; then
    log "Node ${NODE_VER} détecté (< 20.9). Relancez et choisissez 'latest-lts' ou une version ≥ 20.9."
    exit 1
  fi
else
  use_node_with_nvm "$NODE_CHOICE"
fi

# Refresh current shell PATH for npm/npx after nvm use
if command -v node >/dev/null 2>&1; then
  NODE_VER="$(node -v | sed 's/^v//')"
  log "Node actif: v${NODE_VER}"
else
  log "Node toujours introuvable après configuration nvm."
  exit 1
fi
if ! command -v npx >/dev/null 2>&1; then
  log "npx introuvable (npm). Vérifiez votre installation Node."
  exit 1
fi

# ------------------ Next: select version ------------------
log "Choix version Next:"
log "  - Tapez 'latest' pour prendre la dernière version (défaut)"
log "  - Tapez une version précise (ex: 16.1.3)"
read -rp "${PREFIX} Version Next [latest]: " NEXT_CHOICE
NEXT_CHOICE="${NEXT_CHOICE:-latest}"

# ------------------ Groupe & dossier ------------------
banner "PRÉPARATION • ${PROJECT_NAME}"
if getent group "${GROUP_NAME}" >/dev/null 2>&1; then
  log "Groupe '${GROUP_NAME}' déjà existant."
else
  run_cmd "${SUDO} groupadd '${GROUP_NAME}'"
fi

if [[ -e "${PROJECT_DIR}" ]]; then
  log "Le chemin ${PROJECT_DIR} existe déjà. Abandon."
  exit 1
fi
run_cmd "${SUDO} mkdir -p '${PROJECT_DIR}'"
run_cmd "${SUDO} chown root:'${GROUP_NAME}' '${PROJECT_DIR}'"
run_cmd "${SUDO} chmod 2775 '${PROJECT_DIR}'"   # setgid

# ------------------ Scaffolding Next app ------------------
banner "CRÉATION • Next.js scaffold"
CREATE_CMD="npx --yes create-next-app@latest '${PROJECT_DIR}' \
  --ts --app --tailwind --eslint --turbopack --no-src-dir --use-npm"
run_cmd "${CREATE_CMD}"

# ------------------ Si Next spécifique: forcer la version ------------------
if [[ "${NEXT_CHOICE}" != "latest" ]]; then
  banner "PIN • next@${NEXT_CHOICE}"
  run_cmd "cd '${PROJECT_DIR}' && npm i -E next@'${NEXT_CHOICE}'"
fi

# ------------------ Permissions & ACL ------------------
banner "DROITS • Groupe complet"
run_cmd "${SUDO} chown -R root:'${GROUP_NAME}' '${PROJECT_DIR}'"
run_cmd "${SUDO} chmod -R g+rwX '${PROJECT_DIR}'"
run_cmd "${SUDO} find '${PROJECT_DIR}' -type d -exec chmod g+s {} +"
if command -v setfacl >/dev/null 2>&1; then
  run_cmd "${SUDO} setfacl -R -m g:${GROUP_NAME}:rwX '${PROJECT_DIR}'"
  run_cmd "${SUDO} setfacl -dR -m g:${GROUP_NAME}:rwX '${PROJECT_DIR}'"
else
  log "setfacl indisponible, chmod/setgid appliqués."
fi

# ------------------ Récap ------------------
banner "RÉCAP • NEOMNIA ACSS"
log "Projet      : ${PROJECT_NAME}"
log "Dossier     : ${PROJECT_DIR}"
log "Groupe      : ${GROUP_NAME}"
log "Node        : v${NODE_VER}"
log "Next        : ${NEXT_CHOICE}"
log "Dev         : cd '${PROJECT_DIR}' && npm run dev"
log "Build/Start : cd '${PROJECT_DIR}' && npm run build && npm run start -- -p 3000"
log "Ajouter un utilisateur au groupe :"
log "  ${SUDO} usermod -aG '${GROUP_NAME}' <utilisateur>  # puis reconnecter la session"

banner "TERMINÉ • NEOMNIA ACSS"
exit 0
