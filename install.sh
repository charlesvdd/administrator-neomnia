#!/usr/bin/env bash

################################################################################
#                                                                              #
#   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó             #
#   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó            #
#   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë            #
#   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë            #
#   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë            #
#   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù            #
#                                                                              #
#   Script : install.sh                                                        #
#   Auteur : Charles van den Driessche                                          #
#   Licence: GNU General Public License v3.0                                   #
#   Ann√©e  : 2025                                                              #
#                                                                              #
################################################################################

# Couleurs pour le texte
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # Pas de couleur

set -euo pipefail

# Affiche une banni√®re stylis√©e au lancement
print_banner() {
  echo -e "${CYAN}"
  echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
  echo "                           Installation Git & GitHub CLI                      "
  echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
  echo -e "${NC}"
  echo -e "${YELLOW}Auteur   : Charles van den Driessche${NC}"
  echo -e "${YELLOW}Site Web : https://www.neomnia.net${NC}"
  echo -e "${YELLOW}Licence  : GNU GPL v3${NC}"
  echo
}

# Fonction pour afficher un message d'erreur puis quitter
error() {
  echo -e "${RED}Erreur : $1${NC}" >&2
  exit 1
}

# 0. Mise √† jour du syst√®me (packages)
update_system() {
  echo -e "${CYAN}‚û§ Mise √† jour du syst√®me${NC}"
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    if command -v apt-get &>/dev/null; then
      echo "  - Mise √† jour des listes de paquets (apt-get update)..."
      sudo apt-get update -qq
      echo "  - Mise √† niveau des paquets install√©s (apt-get upgrade)..."
      sudo apt-get upgrade -y -qq
      echo -e "${GREEN}‚úî Syst√®me Linux mis √† jour.${NC}"
    else
      echo -e "${YELLOW}‚ÑπÔ∏è  Impossible de d√©tecter apt-get. Passez manuellement cette √©tape.${NC}"
    fi
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    if command -v brew &>/dev/null; then
      echo "  - Mise √† jour de Homebrew..."
      brew update >/dev/null
      echo "  - Mise √† niveau des formules install√©es..."
      brew upgrade >/dev/null
      echo -e "${GREEN}‚úî Syst√®me macOS mis √† jour via Homebrew.${NC}"
    else
      echo -e "${YELLOW}‚ÑπÔ∏è  Homebrew non install√©. Passez manuellement cette √©tape.${NC}"
    fi
  else
    echo -e "${YELLOW}‚ÑπÔ∏è  OS non reconnu pour mise √† jour automatique. Passez manuellement.${NC}"
  fi
  echo
}

# 1. Installer Git et GitHub CLI (gh)
install_tools() {
  echo -e "${CYAN}‚û§ Installation de Git et GitHub CLI${NC}"
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    if command -v apt-get &>/dev/null; then
      echo "  - D√©tection Ubuntu/Debian (apt-get)."
      sudo apt-get install -y git curl wget -qq
      if ! command -v gh &>/dev/null; then
        echo "  - T√©l√©chargement et installation de GitHub CLI (gh)..."
        ARCH=$(uname -m)
        wget -qO /tmp/gh.deb "https://github.com/cli/cli/releases/latest/download/gh_${ARCH}_deb.deb"
        sudo dpkg -i /tmp/gh.deb &>/dev/null || sudo apt-get install -f -y -qq
        rm -f /tmp/gh.deb
      else
        echo "  - GitHub CLI (gh) est d√©j√† install√©."
      fi
    else
      error "Distribution Linux non prise en charge automatiquement. Installez manuellement git et gh."
    fi

  elif [[ "$OSTYPE" == "darwin"* ]]; then
    echo "  - D√©tection macOS (Homebrew)."
    if ! command -v brew &>/dev/null; then
      echo "    ‚Ä¢ Homebrew introuvable. Installation de Homebrew..."
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi
    echo "  - Installation de git et gh via Homebrew..."
    brew install git gh >/dev/null
  else
    error "OS non pris en charge automatiquement. Installez manuellement git et la CLI GitHub (gh)."
  fi

  # V√©rification
  if ! command -v git &>/dev/null; then
    error "L'installation de git a √©chou√©."
  fi
  if ! command -v gh &>/dev/null; then
    error "L'installation de gh (GitHub CLI) a √©chou√©."
  fi

  echo -e "${GREEN}‚úî Git ($(git --version)) et GitHub CLI ($(gh --version | head -n1)) sont pr√™ts.${NC}"
  echo
}

# 2. R√©cup√©rer le GitHub API token depuis variable ou prompt
ask_token() {
  echo -e "${CYAN}‚û§ Configuration du GitHub API token${NC}"
  if [[ -n "${GITHUB_TOKEN-}" ]]; then
    echo "   Token GitHub pris depuis la variable d‚Äôenvironnement."
  else
    read -rp "   Entrez votre GitHub API token (PAT, scope repo) : " GITHUB_TOKEN
    if [[ -z "$GITHUB_TOKEN" ]]; then
      error "Le token ne peut pas √™tre vide."
    fi
  fi
  echo
}

# 3. Authentifier GH CLI avec le token
authenticate_gh() {
  echo -e "${CYAN}‚û§ Authentification GitHub CLI${NC}"
  echo "$GITHUB_TOKEN" | gh auth login --with-token
  echo -e "${GREEN}‚úî GH CLI authentifi√© avec le token fourni.${NC}"
  echo
}

# 4. Configurer Git (user.name et user.email depuis variables ou prompt)
configure_git() {
  echo -e "${CYAN}‚û§ Configuration basique de Git${NC}"
  if [[ -n "${GIT_FULLNAME-}" ]]; then
    git config --global user.name "$GIT_FULLNAME"
    echo -e "   user.name d√©fini depuis la variable : ${YELLOW}$GIT_FULLNAME${NC}"
  else
    read -rp "   Entrez votre nom complet (pour git config user.name) : " GIT_FULLNAME
    if [[ -n "$GIT_FULLNAME" ]]; then
      git config --global user.name "$GIT_FULLNAME"
      echo -e "   user.name d√©fini √† : ${YELLOW}$GIT_FULLNAME${NC}"
    fi
  fi

  if [[ -n "${GIT_EMAIL-}" ]]; then
    git config --global user.email "$GIT_EMAIL"
    echo -e "   user.email d√©fini depuis la variable : ${YELLOW}$GIT_EMAIL${NC}"
  else
    read -rp "   Entrez votre e-mail (pour git config user.email) : " GIT_EMAIL
    if [[ -n "$GIT_EMAIL" ]]; then
      git config --global user.email "$GIT_EMAIL"
      echo -e "   user.email d√©fini √† : ${YELLOW}$GIT_EMAIL${NC}"
    fi
  fi

  echo -e "${GREEN}‚úî Configuration Git actuelle (global) :${NC}"
  git config --global --list
  echo
}

# 5. V√©rification finale (liste des repos via GH)
final_gh_login() {
  echo -e "${CYAN}‚û§ V√©rification finale de l'acc√®s GitHub${NC}"
  echo "   Pour tester l'acc√®s, le script va tenter de lister vos d√©p√¥ts :"
  GH_USER="$(gh api /user --jq .login)"
  if gh repo list "$GH_USER" &>/dev/null; then
    echo -e "${GREEN}‚úî Connexion r√©ussie ! Voici la liste de vos d√©p√¥ts :${NC}"
    gh repo list "$GH_USER"
  else
    echo -e "${RED}‚úñ Impossible d'acc√©der √† vos d√©p√¥ts via le token.${NC}"
    echo "   V√©rifiez que le token a le scope 'repo' et r√©essayez."
  fi
  echo
}

# Ex√©cution s√©quentielle des √©tapes
print_banner
update_system
install_tools
ask_token
authenticate_gh
configure_git
final_gh_login

echo -e "${GREEN}üåü Tout est configur√© ! Vous pouvez maintenant utiliser Git et GitHub CLI via le token.${NC}"
