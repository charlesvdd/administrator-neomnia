#!/usr/bin/env bash
set -e

# ----------------------------------------------------
#  Script : setup-nextjs-graphique.sh
#  Objectif : Pr√©parer (ou mettre √† jour) l'environnement pour un
#             projet React + Next.js sur Debian/Ubuntu, avec un affichage color√©
# ----------------------------------------------------

### 1. D√©finitions des couleurs (ANSI)
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
BOLD='\033[1m'
RESET='\033[0m'

### 2. Affichage de la banni√®re ASCII
echo -e "${CYAN}${BOLD}"
cat << "EOF"
 _   _            _   _      _       _        
| \ | | ___  __ _| \ | | ___| |_ ___| |__ ___ 
|  \| |/ _ \/ _` |  \| |/ _ \ __/ __| '_ \ __|
| |\  |  __/ (_| | |\  |  __/ || (__| | | \__ \
|_| \_|\___|\__, |_| \_|\___|\__\___|_| |_|___/
             |___/                             

   üöÄ   Setup React + Next.js environment   üöÄ
EOF
echo -e "${RESET}"

sleep 1  # petit d√©lai pour laisser le temps de lire la banni√®re

### 3. V√©rification des droits root (sudo)
if [ "$EUID" -ne 0 ]; then
  echo -e "${RED}‚ùó Merci d'ex√©cuter ce script en tant que root (ou via sudo).${RESET}" >&2
  exit 1
fi

### 4. Variables globales
NODE_REQUIRED_VERSION="18.0.0"
PROJECT_NAME=""
INSTALL_ESLINT_PRETTIER=true

### 5. Fonction pour comparer deux versions (utilise dpkg pour Debian/Ubuntu)
version_ge() {
  # renvoie vrai si $1 >= $2
  dpkg --compare-versions "$1" ge "$2"
}

#### 6. Mise √† jour des paquets syst√®me (toujours OK √† r√©-ex√©cuter)
echo -e "${BLUE}‚ûú Mise √† jour des paquets syst√®me...${RESET}"
apt-get update -y > /dev/null
apt-get upgrade -y > /dev/null
echo -e "${GREEN}‚úîÔ∏è  Syst√®me √† jour.${RESET}"

#### 7. Installation conditionnelle de Git, curl et build-essential
for pkg in git curl build-essential; do
  if ! dpkg -s "$pkg" &>/dev/null; then
    echo -e "${YELLOW}‚ûú Installation de ${pkg}...${RESET}"
    apt-get install -y "$pkg" > /dev/null
    echo -e "${GREEN}   ‚Ä¢ ${pkg} install√©.${RESET}"
  else
    echo -e "${GREEN}‚Üí ${pkg} est d√©j√† install√©.${RESET}"
  fi
done

#### 8. V√©rification/install de Node.js version >= 18.x
if command -v node &>/dev/null; then
  CURRENT_NODE_VERSION="$(node -v | sed 's/^v//')"
  if version_ge "$CURRENT_NODE_VERSION" "$NODE_REQUIRED_VERSION"; then
    echo -e "${GREEN}‚Üí Node.js v${CURRENT_NODE_VERSION} (>= ${NODE_REQUIRED_VERSION}) d√©j√† install√©.${RESET}"
  else
    echo -e "${YELLOW}‚ö†Ô∏è  Node.js v${CURRENT_NODE_VERSION} < ${NODE_REQUIRED_VERSION} : mise √† jour en cours...${RESET}"
    curl -fsSL https://deb.nodesource.com/setup_18.x | bash - > /dev/null 2>&1
    apt-get install -y nodejs > /dev/null
    echo -e "${GREEN}   ‚Ä¢ Node.js mis √† jour vers v$(node -v | sed 's/^v//').${RESET}"
  fi
else
  echo -e "${BLUE}‚ûú Installation de Node.js ${NODE_REQUIRED_VERSION}...${RESET}"
  curl -fsSL https://deb.nodesource.com/setup_18.x | bash - > /dev/null 2>&1
  apt-get install -y nodejs > /dev/null
  echo -e "${GREEN}   ‚Ä¢ Node.js v$(node -v | sed 's/^v//') install√©.${RESET}"
fi

echo -e "${CYAN}‚Üí Node.js version : $(node -v)${RESET}"
echo -e "${CYAN}‚Üí npm version     : $(npm -v)${RESET}"

#### 9. Nom du projet (pass√© en argument ou interactif)
if [ -z "$1" ]; then
  echo -ne "${MAGENTA}‚ûú Nom du projet Next.js (sans espaces, ex : mon-projet) : ${RESET}"
  read -r PROJECT_NAME
else
  PROJECT_NAME="$1"
fi

if [ -z "$PROJECT_NAME" ]; then
  echo -e "${RED}‚ùó Erreur : vous devez fournir un nom de projet valide.${RESET}" >&2
  exit 1
fi

#### 10. Si le dossier du projet existe d√©j√†
if [ -d "$PROJECT_NAME" ]; then
  echo -e "${YELLOW}‚ö†Ô∏è  Le dossier '${PROJECT_NAME}' existe d√©j√†.${RESET}"
  cd "$PROJECT_NAME"

  # Si package.json existe : on consid√®re que c'est un projet Node
  if [ -f "package.json" ]; then
    echo -e "${GREEN}‚Üí Projet existant d√©tect√© (package.json pr√©sent).${RESET}"
    echo -e "${BLUE}   - Mise √† jour des d√©pendances npm...${RESET}"
    npm install > /dev/null
    echo -e "${GREEN}   ‚Ä¢ D√©pendances mises √† jour.${RESET}"

    echo -e "${BLUE}   - V√©rification/installation d'ESLint et Prettier...${RESET}"
    if [ "$INSTALL_ESLINT_PRETTIER" = true ]; then
      if ! grep -q '"prettier"' package.json; then
        echo -e "${YELLOW}     ‚Ä¢ Installation de Prettier + compl√©ments ESLint...${RESET}"
        npm install --save-dev prettier eslint-config-prettier eslint-plugin-react eslint-plugin-react-hooks > /dev/null
        echo -e "${GREEN}       ‚úì Prettier et ESLint install√©s.${RESET}"
      else
        echo -e "${GREEN}     ‚Ä¢ Prettier/ESLint d√©j√† install√©s.${RESET}"
      fi
    fi

    # Mise √† jour du d√©p√¥t Git (si initialis√©)
    if [ -d ".git" ]; then
      echo -e "${GREEN}   ‚Ä¢ D√©p√¥t Git local d√©tect√©. (git pull possible si c'est un clone)${RESET}"
    else
      echo -e "${BLUE}   - Initialisation d'un d√©p√¥t Git local...${RESET}"
      git init > /dev/null
      git add .  
      git commit -m "Initial commit : projet existant mis √† jour" > /dev/null
      echo -e "${GREEN}     ‚úì Git initialis√© et commit cr√©√©.${RESET}"
    fi

    echo
    echo -e "${GREEN}${BOLD}‚úÖ Mise √† jour du projet '${PROJECT_NAME}' termin√©e.${RESET}"
    echo -e "${CYAN}   Pour lancer le serveur de d√©veloppement :${RESET}"
    echo -e "       ${BOLD}npm run dev${RESET}"
    exit 0
  else
    echo -e "${RED}‚ùó Le dossier existe mais ne contient pas de package.json (pas de projet Node valide).${RESET}"
    echo -ne "${YELLOW}‚ùì Souhaitez-vous supprimer/r√©initialiser ce dossier ? (o/N) : ${RESET}"
    read -r RESP
    if [[ "$RESP" =~ ^[oO]$ ]]; then
      echo -e "${BLUE}‚Üí Suppression de '${PROJECT_NAME}' en cours...${RESET}"
      cd ..
      rm -rf "$PROJECT_NAME"
      echo -e "${GREEN}   ‚Ä¢ Dossier supprim√©. Recr√©ation du projet...${RESET}"
    else
      echo -e "${RED}‚ùå Interruption : le dossier existe et n'a pas √©t√© r√©initialis√©.${RESET}"
      exit 1
    fi
  fi
fi

#### 11. Cr√©ation d'un nouveau projet Next.js
echo -e "${BLUE}‚ûú Cr√©ation du projet Next.js '${PROJECT_NAME}'...${RESET}"
npx create-next-app@latest "$PROJECT_NAME" --typescript --eslint > /dev/null
echo -e "${GREEN}   ‚Ä¢ Projet g√©n√©r√© par create-next-app.${RESET}"

cd "$PROJECT_NAME"

#### 12. Installation conditionnelle d'ESLint + Prettier (si non pr√©sents)
if [ "$INSTALL_ESLINT_PRETTIER" = true ]; then
  if ! grep -q '"prettier"' package.json; then
    echo -e "${BLUE}‚ûú Installation de Prettier + compl√©ments ESLint...${RESET}"
    npm install --save-dev prettier eslint-config-prettier eslint-plugin-react eslint-plugin-react-hooks > /dev/null
    echo -e "${GREEN}   ‚Ä¢ Prettier et ESLint install√©s.${RESET}"
  else
    echo -e "${GREEN}‚Üí Prettier/ESLint d√©j√† pr√©sents dans les d√©pendances.${RESET}"
  fi
fi

#### 13. Initialisation d‚Äôun d√©p√¥t Git local
if [ -d ".git" ]; then
  echo -e "${GREEN}‚Üí Git est d√©j√† initialis√© par create-next-app.${RESET}"
else
  echo -e "${BLUE}‚ûú Initialisation d'un d√©p√¥t Git local...${RESET}"
  git init > /dev/null
  echo -e "${GREEN}   ‚Ä¢ Git initialis√©.${RESET}"
fi
git add .  
git commit -m "Initial commit : setup initial Next.js project" > /dev/null
echo -e "${GREEN}   ‚Ä¢ Premier commit effectu√©.${RESET}"

#### 14. Instructions finales
echo
echo -e "${GREEN}${BOLD}‚úÖ Projet Next.js '${PROJECT_NAME}' configur√© avec succ√®s !${RESET}"
echo -e "${CYAN}   Pour d√©marrer le serveur de d√©veloppement :${RESET}"
echo -e "       ${BOLD}cd ${PROJECT_NAME}${RESET}"
echo -e "       ${BOLD}npm run dev${RESET}"
echo
echo -e "${MAGENTA}   Vous pouvez √©galement :${RESET}"
echo -e "   - Ajouter votre d√©p√¥t distant : ${BOLD}git remote add origin <URL_DU_REPO>${RESET}"
echo -e "   - Pousser la premi√®re version : ${BOLD}git push -u origin main${RESET}"
echo
echo -e "${CYAN}   Bon d√©veloppement !${RESET}"
